{
  "name": "hassu",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@aws-sdk/client-cloudformation": "^3.686.0",
    "@aws-sdk/client-cloudfront": "^3.686.0",
    "@aws-sdk/client-dynamodb": "^3.686.0",
    "@aws-sdk/client-lambda": "^3.686.0",
    "@aws-sdk/client-s3": "^3.686.0",
    "@aws-sdk/client-scheduler": "^3.686.0",
    "@aws-sdk/client-sqs": "^3.686.0",
    "@aws-sdk/client-ssm": "^3.686.0",
    "@aws-sdk/client-wafv2": "^3.686.0",
    "@aws-sdk/cloudfront-signer": "^3.686.0",
    "@aws-sdk/lib-dynamodb": "^3.686.0",
    "@aws-sdk/lib-storage": "^3.686.0",
    "@aws-sdk/s3-presigned-post": "^3.686.0",
    "@aws-sdk/s3-request-presigner": "^3.686.0",
    "@aws-sdk/util-dynamodb": "^3.686.0",
    "@babel/plugin-proposal-decorators": "^7.23.2",
    "@date-io/core": "^2.17.0",
    "@date-io/dayjs": "^2.17.0",
    "@emotion/is-prop-valid": "^1.2.1",
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@fortawesome/fontawesome-svg-core": "6.5.2",
    "@fortawesome/free-brands-svg-icons": "6.5.2",
    "@fortawesome/free-regular-svg-icons": "6.5.2",
    "@fortawesome/free-solid-svg-icons": "6.5.2",
    "@fortawesome/react-fontawesome": "0.2.2",
    "@hassu/asianhallinta": "0.3.23",
    "@hookform/error-message": "2.0.1",
    "@hookform/resolvers": "^2.9.11",
    "@mui/icons-material": "~5.10.6",
    "@mui/material": "~5.10.6",
    "@mui/system": "~5.10.6",
    "@mui/x-date-pickers": "^5.0.20",
    "@smithy/protocol-http": "^4.1.5",
    "@tanstack/react-table": "^8.10.7",
    "@tanstack/react-virtual": "^3.5.1",
    "@turf/turf": "6.5.0",
    "@types/content-disposition": "^0.5.7",
    "@types/geojson": "^7946.0.14",
    "@types/js-cookie": "^3.0.5",
    "@types/mime-types": "^2.1.3",
    "@types/pdfkit": "^0.12.12",
    "@types/react-scroll": "^1.8.9",
    "@types/react-table": "^7.7.17",
    "@types/uuid": "^8.3.4",
    "@typescript-eslint/eslint-plugin": "^6.9.1",
    "@typescript-eslint/parser": "^6.9.1",
    "apollo-cache-inmemory": "^1.6.6",
    "apollo-client": "^2.6.10",
    "apollo-link": "^1.2.14",
    "apollo-link-context": "^1.0.20",
    "apollo-link-error": "^1.1.13",
    "apollo-link-http": "^1.5.17",
    "archiver": "^6.0.1",
    "aws-appsync-auth-link": "^2.0.8",
    "axios": "^0.27.2",
    "classnames": "^2.3.2",
    "content-disposition": "^0.5.4",
    "convert-units": "^2.3.4",
    "country-code-lookup": "0.1.2",
    "cross-fetch": "^4.0.0",
    "dayjs": "~1.10.7",
    "esbuild": "^0.12.29",
    "form-data": "^4.0.0",
    "graphql": "^14.7.0",
    "graphql-tag": "^2.12.6",
    "hassu-common": "file:common",
    "html-react-parser": "^3.0.16",
    "js-cookie": "^3.0.5",
    "jsonschema": "^1.4.1",
    "jsonwebtoken": "^9.0.2",
    "jwk-to-pem": "^2.0.5",
    "lodash": "^4.17.21",
    "loglevel": "^1.8.1",
    "mime-types": "^2.1.35",
    "next": "^12.3.4",
    "next-translate": "~2.0.5",
    "node-cache": "^5.1.2",
    "ol": "8.1.0",
    "ol-mapbox-style": "12.1.1",
    "pdf-merger-js": "^4.3.1",
    "pdfkit": "^0.12.3",
    "pdfkit-table": "^0.1.99",
    "pino": "^7.11.0",
    "proj4": "^2.9.2",
    "randomatic": "^3.1.1",
    "rdndmb-html5-to-touch": "^7.1.3",
    "react": "18.3.1",
    "react-dnd": "^16.0.1",
    "react-dnd-multi-backend": "^7.1.3",
    "react-dom": "18.3.1",
    "react-dropzone": "^11.7.1",
    "react-hook-form": "7.52.0",
    "react-scroll": "^1.9.0",
    "react-table": "^7.8.0",
    "reflect-metadata": "^0.1.13",
    "rss": "^1.2.2",
    "soap": "^1.0.0",
    "source-map-support": "^0.5.21",
    "swr": "^1.3.0",
    "uuid": "^8.3.2",
    "web-vitals": "^2.1.4",
    "write-excel-file": "^1.4.29",
    "xml2js": "^0.6.2",
    "yaml": "^2.3.3",
    "yup": "^0.32.11"
  },
  "devDependencies": {
    "@aws-amplify/api": "^5.4.5",
    "@aws-amplify/auth": "^5.6.5",
    "@aws-amplify/core": "^5.8.5",
    "@babel/core": "^7.23.2",
    "@babel/plugin-proposal-class-properties": "^7.18.6",
    "@babel/plugin-proposal-private-methods": "^7.18.6",
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@graphql-tools/load-files": "^7.0.0",
    "@graphql-tools/merge": "^9.0.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^13.5.0",
    "@types/archiver": "^5.3.4",
    "@types/aws-lambda": "^8.10.145",
    "@types/chai": "^4.3.9",
    "@types/chai-as-promised": "^7.1.7",
    "@types/convert-units": "^2.3.9",
    "@types/expect": "^24.3.0",
    "@types/express": "^4.17.21",
    "@types/jsonwebtoken": "^8.5.9",
    "@types/jwk-to-pem": "^2.0.2",
    "@types/mocha": "^9.1.1",
    "@types/node": "^18.18.8",
    "@types/node-persist": "^3.1.5",
    "@types/nodemailer": "^6.4.13",
    "@types/proj4": "^2.5.5",
    "@types/randomatic": "^3.1.4",
    "@types/react": "18.3.3",
    "@types/react-dom": "18.3.0",
    "@types/rss": "^0.0.31",
    "@types/sinon": "^10.0.20",
    "@types/sinon-chai": "^3.2.11",
    "@types/yargs": "^17.0.29",
    "@typescript-eslint/typescript-estree": "^5.10.2",
    "autoprefixer": "^10.4.16",
    "aws-amplify": "^5.3.11",
    "aws-sdk-client-mock": "^4.1.0",
    "aws-xray-sdk-core": "^3.10.1",
    "axios-logger": "^2.7.0",
    "babel-jest": "^27.5.1",
    "babel-loader": "^8.3.0",
    "babel-plugin-transform-typescript-metadata": "^0.3.2",
    "c8": "^8.0.1",
    "chai": "^4.3.10",
    "chai-as-promised": "^7.1.1",
    "conventional-changelog-conventionalcommits": "^4.6.3",
    "copy-webpack-plugin": "^12.0.2",
    "copyfiles": "^2.4.1",
    "cross-env": "^7.0.3",
    "cypress": "13.13.1",
    "cypress-file-upload": "5.0.8",
    "cypress-mochawesome-reporter": "3.8.2",
    "cypress-multi-reporters": "1.6.4",
    "deep-object-diff": "^1.1.9",
    "dotenv": "^10.0.0",
    "encoding": "^0.1.13",
    "eslint": "^8.52.0",
    "eslint-config-next": "^12.3.4",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-mocha-no-only": "^1.1.1",
    "express": "^4.18.2",
    "husky": "^7.0.4",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^27.5.1",
    "loader-utils": "^1.4.2",
    "mocha": "^9.2.2",
    "mocha-chai-jest-snapshot": "^1.1.4",
    "mocha-junit-reporter": "^2.2.1",
    "mocha-multi-reporters": "^1.5.1",
    "mocha-sonarqube-reporter": "^1.0.2",
    "mockdate": "^3.0.5",
    "next-translate-plugin": "~2.0.5",
    "node-fetch": "^2.7.0",
    "node-persist": "^3.1.3",
    "nodemailer": "^6.9.7",
    "pino-pretty": "^7.6.1",
    "postcss": "^8.4.31",
    "prettier": "^2.8.8",
    "read-excel-file": "^5.7.1",
    "rimraf": "^3.0.2",
    "shell-quote": "^1.8.1",
    "sinon": "^11.1.2",
    "sinon-chai": "^3.7.0",
    "sonarqube-scanner": "^3.1.0",
    "tailwindcss": "^3.3.5",
    "ts-mocha": "^10.0.0",
    "ts-node": "^10.9.1",
    "tsconfig-paths-webpack-plugin": "^3.5.2",
    "turbo": "^1.10.16",
    "typescript": "^4.5.5",
    "yargs": "^17.7.2"
  },
  "overrides": {
    "loader-utils": "$loader-utils",
    "uuid": "$uuid",
    "shell-quote": "$shell-quote",
    "postcss": "$postcss",
    "got": "12.6.1",
    "fast-xml-parser": "4.2.5"
  },
  "scripts": {
    "postinstall": "(cd deployment && npm i) && (cd common && npm i) && (cd migration-cli && npm i --ignore-scripts) && (cd layers/lambda-base/nodejs && npm i --production) && ./deployment/bin/patchPdfkitTable.sh",
    "clean": "rimraf .cdk-* .next .report .serverless .serverless_nextjs build cdk.out out schema.graphql common/graphql/*",
    "clean:packages": "rimraf node_modules package-lock.json deployment/node_modules deployment/package-lock.json migration-cli/node_modules migration-cli/package-lock.json layers/lambda-base/nodejs/node_modules layers/lambda-base/nodejs/package-lock.json",
    "prepare": "husky install",
    "dev": "cross-env VERSION=`git rev-parse --abbrev-ref HEAD` LOG_LEVEL=info next dev",
    "build": "next build",
    "start": "next start",
    "export-under-maintenance": "next build ./under-maintenance && next export -o ./under-maintenance/out ./under-maintenance && aws s3 cp ./under-maintenance/out/ s3://hassu-$ENVIRONMENT-public/huoltokatko --recursive",
    "dev-under-maintenance": "next dev ./under-maintenance",
    "cypress": "cypress",
    "generate:velhoapi": "MSYS_NO_PATHCONV=1 cross-env docker run --rm --env-file .env.test -e VELHO_AUTH_URL -e VELHO_API_URL -e VELHO_USERNAME -e VELHO_PASSWORD -e VELHO_ACCESS_TOKEN=\"$(ts-node --project=tsconfig.cdk.json -r dotenv/config ./tools/velho/authenticate.ts dotenv_config_path=.env.test)\" -v $INIT_CWD:/work ${ACCOUNT_ID:=283563576583}.dkr.ecr.eu-west-1.amazonaws.com/hassu-build-image:$(cat .buildimageversion) /work/tools/velho/gradlew -p /work/tools/velho --info",
    "postgenerate:velhoapi": "ts-node --project=tsconfig.cdk.json ./tools/velho/processMetaData.ts ./backend/src/velho/metadata.json",
    "pregenerate:api": "ts-node --project=tsconfig.cdk.json ./deployment/bin/schemaMerge.ts",
    "generate:api": "cross-env docker run --rm -v $INIT_CWD:/work ${ACCOUNT_ID:=283563576583}.dkr.ecr.eu-west-1.amazonaws.com/hassu-build-image:$(cat .buildimageversion) bash -c \"cd /work && amplify codegen\"",
    "generate": "turbo run turbo:generate --output-logs=new-only",
    "prebuildimage:generate": "ts-node --project=tsconfig.cdk.json ./deployment/bin/schemaMerge.ts",
    "buildimage:generate": "amplify codegen",
    "startBuildImage": "cross-env docker run --rm -it --add-host=hassu:host-gateway -v $INIT_CWD:/work --env=\"DISPLAY=host.docker.internal:0\" -v /tmp/.X11-unix:/tmp/.X11-unix:rw ${ACCOUNT_ID:=283563576583}.dkr.ecr.eu-west-1.amazonaws.com/hassu-build-image:$(cat .buildimageversion) bash",
    "lint:backend": "eslint --cache --ignore-path .gitignore --ext .ts backend",
    "lint:common": "eslint --cache --ignore-path .gitignore --ext .ts common",
    "lint:app": "next lint",
    "lint:tsc": "tsc --project tsconfig.json",
    "lint": "turbo run turbo:lint --output-logs=new-only",
    "localstack": "docker-compose -f deployment/localstack/docker-compose.yml up -d && sleep 10 && cross-env HASSU_HOTSWAP=true ENVIRONMENT=localstack TS_NODE_PROJECT=\"./tsconfig.cdk.json\" ./deployment/node_modules/.bin/cdklocal $NODE_DEBUG_OPTION bootstrap --no-notices --no-lookups --template deployment/localstack/localstack-bootstrap.yml && cross-env HASSU_HOTSWAP=true ENVIRONMENT=localstack TS_NODE_PROJECT=\"./tsconfig.cdk.json\" ./deployment/node_modules/.bin/cdklocal --no-lookups deploy database --require-approval never",
    "postlocalstack": "./deployment/bin/setupLocalStack.sh",
    "localstack:stop": "docker-compose -f deployment/localstack/docker-compose.yml down",
    "setupenvironment": "ts-node -T --project=tsconfig.cdk.json deployment/bin/setupEnvironment.ts",
    "graphQLIntrospection": "ts-node $NODE_DEBUG_OPTION --project=tsconfig.cdk.json -r dotenv/config deployment/bin/runGraphQLIntrospection.ts dotenv_config_path=.env.local",
    "test:coverage": "cross-env-shell COVERAGE_OPTS=\"c8 --reports-dir=./.report/coverage --reporter=lcov --include backend/src\" npm run test",
    "test": "turbo run test:frontend test:backend test:integration",
    "husky:test": "cross-env LOG_LEVEL=silent turbo run turbo:lint test:backend test:integration",
    "test:frontend": "jest --config \"./jest.frontend.config.js\"",
    "test:migration": "cd migration-cli && npm run test",
    "test:backend": "cross-env AWS_PROFILE=nonexistent $COVERAGE_OPTS ts-mocha -p \"./backend/tsconfig.json\" \"backend/test/**/*.test.ts\" \"common/**/*.test.ts\" --reporter mocha-multi-reporters --reporter-options configFile=mocha_reporter_config.json",
    "test:integration": "cross-env $COVERAGE_OPTS ts-mocha -p \"./backend/tsconfig.json\" \"backend/integrationtest/**/*.test.ts\" --reporter mocha-multi-reporters --reporter-options configFile=mocha_reporter_config_integration.json",
    "watch:test:frontend": "jest --config \"./jest.frontend.config.js\" --watch",
    "watch:test:backend": "cross-env AWS_PROFILE=nonexistent ts-mocha -p \"./backend/tsconfig.json\" $NODE_DEBUG_OPTION -r dotenv/config --watch --watch-extensions ts --watch-files backend --watch-files common \"backend/test/**/*.test.ts\" \"common/**/*.test.ts\"",
    "watch:test:integration": "cross-env ts-mocha -p \"./backend/tsconfig.json\" $NODE_DEBUG_OPTION -r dotenv/config --watch --watch-extensions ts --watch-files backend --watch-files common \"backend/integrationtest/**/*.test.ts\"",
    "deploy:database": "./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu\" deploy database --require-approval never",
    "postdeploy:database": "npm run setupenvironment",
    "diff:backend": "./deployment/bin/runcdk.sh diff backend",
    "deploy:backend": "./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu\" deploy backend --require-approval never && npm run setupenvironment && npm run graphQLIntrospection",
    "deploy:backend:hotswap": "cross-env HASSU_HOTSWAP=true ./deployment/node_modules/.bin/cdk $NODE_DEBUG_OPTION --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu\" deploy backend --require-approval never --hotswap",
    "deploy:backend:hotswap-fallback": "cross-env HASSU_HOTSWAP=true ./deployment/node_modules/.bin/cdk $NODE_DEBUG_OPTION --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu\" deploy backend --require-approval never --hotswap-fallback",
    "predeploy:frontend": "rimraf build .next",
    "deploy:frontend": "./deployment/node_modules/.bin/cdk $NODE_DEBUG_OPTION --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu\" deploy frontend --debug --require-approval never",
    "deploy:stackpolicies": "ts-node --project=deployment/tsconfig.json -r dotenv/config ./deployment/bin/setStackPolicies.ts",
    "postdeploy:frontend": "npm run setupenvironment",
    "deploy:account:dev": "cross-env AWS_PROFILE=hassudev ENVIRONMENT=dev ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-account\" deploy account --require-approval never",
    "diff:account:dev": "cross-env AWS_PROFILE=hassudev ENVIRONMENT=dev ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-account\" diff account --require-approval never",
    "diff:waf:dev": "cross-env AWS_PROFILE=hassudev ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-waf\" diff frontendwaf --require-approval never",
    "deploy:waf:dev": "cross-env AWS_PROFILE=hassudev ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-waf\" deploy frontendwaf --require-approval never",
    "diff:waf:prod": "cross-env AWS_PROFILE=hassuprod ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-waf\" diff frontendwaf --require-approval never",
    "deploy:waf:prod": "cross-env AWS_PROFILE=hassuprod ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-waf\" deploy frontendwaf --require-approval never",
    "deploy:monitoring": " ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-monitoring\" deploy monitoring --require-approval never",
    "deploy:account:prod": "cross-env AWS_PROFILE=hassuprod ENVIRONMENT=prod ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-account\" deploy account --require-approval never",
    "diff:account:prod": "cross-env AWS_PROFILE=hassuprod ENVIRONMENT=prod ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-account\" diff account --require-approval never",
    "deploy:pipelines:dev": "cross-env ENVIRONMENT=dev ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-pipelines\" deploy hassu-pipelines --require-approval never",
    "deploy:pipelines:prod": "cross-env ENVIRONMENT=prod ./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-pipelines\" deploy hassu-pipelines --require-approval never",
    "pipeline:bootstrap": "ACCOUNT_ARN=\"$(ts-node --project=tsconfig.cdk.json deployment/bin/get-account-arn.ts)\" && CDK_NEW_BOOTSTRAP=1 cdk bootstrap --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu-pipeline\" --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess $ACCOUNT_ARN",
    "login": "aws sso login",
    "postlogin": "cross-env ./deployment/node_modules/.bin/cdk-sso-sync $AWS_PROFILE && npm run loginNpm",
    "loginNpm": "aws codeartifact login --tool npm --domain hassu-domain --repository hassu-private-npm --namespace @hassu",
    "presynth": "rimraf build cdk.out .next",
    "synth": "./deployment/node_modules/.bin/cdk $NODE_DEBUG_OPTION --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu\" synth",
    "destroy": "./deployment/node_modules/.bin/cdk --app \"ts-node --project=tsconfig.cdk.json ./deployment/bin/hassu\" destroy \"*\" --require-approval never",
    "get-next-version": "./deployment/node_modules/.bin/semantic-release --no-ci --dryRun",
    "release": "cross-env HUSKY=0 ./deployment/node_modules/.bin/semantic-release --no-ci",
    "createVelhoProjekti": "ts-node --project=backend/tsconfig.json -r dotenv/config ./backend/bin/createVelhoProjekti dotenv_config_path=.env.test",
    "deleteVelhoProjekti": "ts-node --project=backend/tsconfig.json -r dotenv/config ./backend/bin/deleteVelhoProjekti dotenv_config_path=.env.test",
    "upgradeDatabase": "ts-node --project=backend/tsconfig.json ./backend/bin/upgradeDatabase.ts",
    "db:tool": "ts-node --project=backend/tsconfig.json ./backend/bin/dbTool.ts",
    "suomifi:test": "DOTENV_CONFIG_PATH=.env.test ts-node --project=backend/tsconfig.json -r dotenv/config ./backend/bin/suomifiTest.ts",
    "pdf:test": "DOTENV_CONFIG_PATH=.env.test ts-node --project=backend/tsconfig.json -r dotenv/config ./backend/bin/pdfTest.ts",
    "turvaposti:test": "DOTENV_CONFIG_PATH=.env.test ts-node --project=backend/tsconfig.json -r dotenv/config ./backend/bin/turvapostiTest.ts",
    "e2e:test:run": "cypress run -b chrome",
    "e2e:test:open": "cypress open",
    "e2e:test:open:dev": "cross-env-shell ENVIRONMENT=dev npm run setupenvironment && cypress open",
    "ecrLogin": "aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${ACCOUNT_ID:=283563576583}.dkr.ecr.eu-west-1.amazonaws.com",
    "updateBuildimage": "./deployment/bin/updateBuildImage.sh",
    "log:backend": "aws logs tail --follow --since 1h /aws/lambda/hassu-backend-$ENVIRONMENT",
    "log:backend:julkinen": "aws logs tail --follow --since 1h /aws/lambda/hassu-backend-julkinen-$ENVIRONMENT",
    "log:backend:dev": "aws logs tail --follow --since 1h /aws/lambda/hassu-backend-dev",
    "log:sqseventhandler": "aws logs tail --follow --since 1h /aws/lambda/hassu-sqs-event-handler-$ENVIRONMENT",
    "log:eventhandler": "aws logs tail --follow --since 1h /aws/lambda/hassu-hyvaksymisesitys-aineisto-handler-$ENVIRONMENT",
    "log:sqseventhandler:dev": "aws logs tail --follow --since 1h /aws/lambda/hassu-sqs-event-handler-dev",
    "log:pdfgenerator": "aws logs tail --follow --since 1h /aws/lambda/hassu-pdf-generator-$ENVIRONMENT",
    "log:pdfgenerator:dev": "aws logs tail --follow --since 1h /aws/lambda/hassu-pdf-generator-dev",
    "log:dynamodb-stream-handler": "aws logs tail --follow --since 1h /aws/lambda/hassu-dynamodb-stream-handler-$ENVIRONMENT",
    "log:dynamodb-stream-handler:dev": "aws logs tail --follow --since 1h /aws/lambda/hassu-dynamodb-stream-handler-dev",
    "log:personsearchupdater": "aws logs tail --follow --since 1h /aws/lambda/hassu-personsearchupdater-$ENVIRONMENT",
    "log:personsearchupdater:dev": "aws logs tail --follow --since 1h /aws/lambda/hassu-personsearchupdater-dev",
    "log:email": "aws logs tail --follow --since 1h /aws/lambda/hassu-email-$ENVIRONMENT",
    "log:frontend:nextjsapi": "cross-env AWS_REGION=eu-central-1 aws logs tail --follow --since 1h /aws/lambda/us-east-1.NextJsApp-${ENVIRONMENT}ApiV2",
    "log:frontend:nextjsapi:dev": "cross-env AWS_REGION=eu-central-1 aws logs tail --follow --since 1h /aws/lambda/us-east-1.NextJsApp-devApiV2",
    "log:asianhallinta": "aws logs tail --follow --since 1h /aws/lambda/hassu-asianhallinta-${ENVIRONMENT}",
    "log:kiinteistohandler": "aws logs tail --follow --since 1h /aws/lambda/hassu-kiinteisto-$ENVIRONMENT",
    "log:suomifi": "aws logs tail --follow --since 1h /aws/lambda/hassu-suomifi-$ENVIRONMENT",
    "log:keycloak:dev": "cross-env ENVIRONMENT=dev aws logs tail --follow --since 1h /aws/lambda/hassu-keycloak-$ENVIRONMENT",
    "log:keycloak:prod": "cross-env AWS_PROFILE=hassuprod ENVIRONMENT=prod aws logs tail --follow --since 1h /aws/lambda/hassu-keycloak-$ENVIRONMENT",
    "sonar": "cross-env LATEST_VERSION=\"$(git describe --tags --abbrev=0 --contains test)\" node -r dotenv/config ./deployment/bin/sonar.js dotenv_config_path=.env.local",
    "opensearch:getmapping": "cross-env DOTENV_CONFIG_PATH=.env.test ts-node --project=backend/tsconfig.json -r dotenv/config ./deployment/bin/opensearch.ts getmapping projekti backend/src/projektiSearch/projekti-mapping.json",
    "opensearch:getsettings": "cross-env DOTENV_CONFIG_PATH=.env.test ts-node --project=backend/tsconfig.json -r dotenv/config ./deployment/bin/opensearch.ts getsettings projekti backend/src/projektiSearch/projekti-settings.json",
    "opensearch:delete-index": "aws lambda invoke --cli-binary-format raw-in-base64-out --function-name hassu-dynamodb-stream-handler-$ENVIRONMENT --payload '{\"action\": \"deleteIndex\"}' --log-type Tail lambda_response.json | node ./deployment/bin/process-lambda-output.js && rimraf lambda_response.json",
    "opensearch:index": "aws lambda invoke --cli-binary-format raw-in-base64-out --function-name hassu-dynamodb-stream-handler-$ENVIRONMENT --payload '{\"action\": \"index\"}' --log-type Tail lambda_response.json | node ./deployment/bin/process-lambda-output.js && rimraf lambda_response.json",
    "opensearch:delete-omistajaindex": "aws lambda invoke --cli-binary-format raw-in-base64-out --function-name hassu-omistaja-dynamodb-stream-handler-$ENVIRONMENT --payload '{\"action\": \"deleteIndex\"}' --log-type Tail lambda_response.json | node ./deployment/bin/process-lambda-output.js && rimraf lambda_response.json",
    "opensearch:omistajaindex": "aws lambda invoke --cli-binary-format raw-in-base64-out --function-name hassu-omistaja-dynamodb-stream-handler-$ENVIRONMENT --payload '{\"action\": \"index\"}' --log-type Tail lambda_response.json | node ./deployment/bin/process-lambda-output.js && rimraf lambda_response.json",
    "opensearch:delete-muistuttajaindex": "aws lambda invoke --cli-binary-format raw-in-base64-out --function-name hassu-muistuttaja-dynamodb-stream-handler-$ENVIRONMENT --payload '{\"action\": \"deleteIndex\"}' --log-type Tail lambda_response.json | node ./deployment/bin/process-lambda-output.js && rimraf lambda_response.json",
    "opensearch:muistuttajaindex": "aws lambda invoke --cli-binary-format raw-in-base64-out --function-name hassu-muistuttaja-dynamodb-stream-handler-$ENVIRONMENT --payload '{\"action\": \"index\"}' --log-type Tail lambda_response.json | node ./deployment/bin/process-lambda-output.js && rimraf lambda_response.json",
    "maintenancemode": "ts-node --project=deployment/tsconfig.json -r dotenv/config ./deployment/bin/maintenanceMode.ts dotenv_config_path=.env.test",
    "update-asianhallinta": "npx --yes npm-check-updates -u @hassu/asianhallinta && npm i",
    "switchenv": "ts-node -T --project=tsconfig.cdk.json  ./deployment/bin/switchEnv.ts && direnv exec . npm run setupenvironment",
    "generate:puml": "npx node-plantuml generate doc/suomifi_tunnistautuminen.puml -o doc/suomifi_tunnistautuminen.png",
    "mml:test": "ts-node --project=backend/tsconfig.json ./backend/bin/mmlTest.ts",
    "format": "prettier . --write"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=18.17.0",
    "npm": ">=9.6.7"
  }
}
