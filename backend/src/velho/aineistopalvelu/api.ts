/* tslint:disable */
/* eslint-disable */
/**
 * Aineistopalvelu API v1
 * Aineistopalvelu API v1  Palvelu vastaa seuraavista kohdeluokista:  - Aineisto (tekninen nimi: aineisto/aineisto, oid-prefix: 1.2.246.578.5.100)  - Dokumentti (tekninen nimi: aineisto/dokumentti, oid-prefix: 1.2.246.578.5.199)  - Ladattava paketti (tekninen nimi: aineisto/ladattava-paketti, oid-prefix: 1.2.246.578.5.102)  - Pakattu kansio (tekninen nimi: aineisto/pakattu-kansio, oid-prefix: 1.2.246.578.5.101)  - Viittaus (tekninen nimi: aineisto/viittaus, oid-prefix: 1.2.246.578.5.103)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AineistoAineisto
 */
export interface AineistoAineisto {
    /**
     * 
     * @type {AineistoAineistoMetatiedot}
     * @memberof AineistoAineisto
     */
    'metatiedot': AineistoAineistoMetatiedot;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'muokattu': string | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'vektor-malli-id'?: string;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineisto
     */
    'lahdejarjestelma': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineisto
     */
    'paattyen': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'oid': string;
    /**
     * 
     * @type {AineistoAineistoLuoja}
     * @memberof AineistoAineisto
     */
    'luoja': AineistoAineistoLuoja | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AineistoAineisto
     */
    'linkit': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AineistoAineisto
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineisto
     */
    'alkaen': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {AineistoAineistoLuoja}
     * @memberof AineistoAineisto
     */
    'muokkaaja': AineistoAineistoLuoja | null;
    /**
     * 
     * @type {Array<AineistoAineistoVersiotInner>}
     * @memberof AineistoAineisto
     */
    'versiot'?: Array<AineistoAineistoVersiotInner>;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'luotu': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'luontikohdeluokan-oid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineisto
     */
    'lahdejarjestelman-id': string | null;
    /**
     * 
     * @type {AineistoAineistoTuoreinVersio}
     * @memberof AineistoAineisto
     */
    'tuorein-versio'?: AineistoAineistoTuoreinVersio | null;
}
/**
 * 
 * @export
 * @interface AineistoAineistoLuoja
 */
export interface AineistoAineistoLuoja {
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoLuoja
     */
    'kayttajanimi': string;
    /**
     * 
     * @type {boolean}
     * @memberof AineistoAineistoLuoja
     */
    'api'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoLuoja
     */
    'client_id'?: string | null;
}
/**
 * 
 * @export
 * @interface AineistoAineistoMetatiedot
 */
export interface AineistoAineistoMetatiedot {
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoMetatiedot
     */
    'kuvaus'?: string;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineistoMetatiedot
     */
    'rakennusosa'?: object;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineistoMetatiedot
     */
    'tila': object;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoMetatiedot
     */
    'zip-polku'?: string;
    /**
     * 
     * @type {Set<object>}
     * @memberof AineistoAineistoMetatiedot
     */
    'tekniikka-alat'?: Set<object>;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineistoMetatiedot
     */
    'dokumenttityyppi': object;
    /**
     * 
     * @type {boolean}
     * @memberof AineistoAineistoMetatiedot
     */
    'sisaltaa-henkilotietoja': boolean | null;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineistoMetatiedot
     */
    'laji': object | null;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineistoMetatiedot
     */
    'ryhma': object;
}
/**
 * 
 * @export
 * @interface AineistoAineistoTuoreinVersio
 */
export interface AineistoAineistoTuoreinVersio {
    /**
     * 
     * @type {AineistoAineistoVersiotInnerLuoja}
     * @memberof AineistoAineistoTuoreinVersio
     */
    'luoja': AineistoAineistoVersiotInnerLuoja;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoTuoreinVersio
     */
    'nimi': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoTuoreinVersio
     */
    'versio': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoTuoreinVersio
     */
    'tyyppi': string;
    /**
     * 
     * @type {number}
     * @memberof AineistoAineistoTuoreinVersio
     */
    'koko': number;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoTuoreinVersio
     */
    'muokattu': string;
}
/**
 * 
 * @export
 * @interface AineistoAineistoVersiotInner
 */
export interface AineistoAineistoVersiotInner {
    /**
     * 
     * @type {AineistoAineistoVersiotInnerLuoja}
     * @memberof AineistoAineistoVersiotInner
     */
    'luoja': AineistoAineistoVersiotInnerLuoja;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoVersiotInner
     */
    'nimi': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoVersiotInner
     */
    'versio': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoVersiotInner
     */
    'tyyppi': string;
    /**
     * 
     * @type {number}
     * @memberof AineistoAineistoVersiotInner
     */
    'koko': number;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoVersiotInner
     */
    'muokattu': string;
}
/**
 * 
 * @export
 * @interface AineistoAineistoVersiotInnerLuoja
 */
export interface AineistoAineistoVersiotInnerLuoja {
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistoVersiotInnerLuoja
     */
    'kayttajanimi': string | null;
}
/**
 * 
 * @export
 * @interface AineistoAineistotInner
 */
export interface AineistoAineistotInner {
    /**
     * 
     * @type {AineistoLisaystiedotMetatiedot}
     * @memberof AineistoAineistotInner
     */
    'metatiedot': AineistoLisaystiedotMetatiedot;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'muokattu': string | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'vektor-malli-id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'lahdejarjestelma': AineistoAineistotInnerLahdejarjestelmaEnum;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineistotInner
     */
    'paattyen': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'oid': string;
    /**
     * 
     * @type {AineistoAineistoLuoja}
     * @memberof AineistoAineistotInner
     */
    'luoja': AineistoAineistoLuoja | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AineistoAineistotInner
     */
    'linkit': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AineistoAineistotInner
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof AineistoAineistotInner
     */
    'alkaen': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {AineistoAineistoLuoja}
     * @memberof AineistoAineistotInner
     */
    'muokkaaja': AineistoAineistoLuoja | null;
    /**
     * 
     * @type {Array<AineistoAineistoVersiotInner>}
     * @memberof AineistoAineistotInner
     */
    'versiot'?: Array<AineistoAineistoVersiotInner>;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'luotu': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'luontikohdeluokan-oid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoAineistotInner
     */
    'lahdejarjestelman-id': string | null;
    /**
     * 
     * @type {AineistoAineistoTuoreinVersio}
     * @memberof AineistoAineistotInner
     */
    'tuorein-versio'?: AineistoAineistoTuoreinVersio | null;
}

export const AineistoAineistotInnerLahdejarjestelmaEnum = {
    Lj05: 'lahdejarjestelma/lj05',
    Lj13: 'lahdejarjestelma/lj13',
    Lj14: 'lahdejarjestelma/lj14',
    Lj03: 'lahdejarjestelma/lj03',
    Lj10: 'lahdejarjestelma/lj10',
    Lj04: 'lahdejarjestelma/lj04',
    Lj08: 'lahdejarjestelma/lj08',
    Lj11: 'lahdejarjestelma/lj11',
    Lj06: 'lahdejarjestelma/lj06',
    Lj02: 'lahdejarjestelma/lj02',
    Lj09: 'lahdejarjestelma/lj09',
    Lj07: 'lahdejarjestelma/lj07',
    Lj15: 'lahdejarjestelma/lj15',
    Lj18: 'lahdejarjestelma/lj18',
    Lj17: 'lahdejarjestelma/lj17',
    Lj20: 'lahdejarjestelma/lj20',
    Lj16: 'lahdejarjestelma/lj16',
    Lj01: 'lahdejarjestelma/lj01',
    Lj19: 'lahdejarjestelma/lj19',
    Lj12: 'lahdejarjestelma/lj12'
} as const;

export type AineistoAineistotInnerLahdejarjestelmaEnum = typeof AineistoAineistotInnerLahdejarjestelmaEnum[keyof typeof AineistoAineistotInnerLahdejarjestelmaEnum];

/**
 * 
 * @export
 * @interface AineistoLisaystiedot
 */
export interface AineistoLisaystiedot {
    /**
     * 
     * @type {AineistoLisaystiedotMetatiedot}
     * @memberof AineistoLisaystiedot
     */
    'metatiedot': AineistoLisaystiedotMetatiedot;
    /**
     * 
     * @type {number}
     * @memberof AineistoLisaystiedot
     */
    'schemaversio': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof AineistoLisaystiedot
     */
    'linkit': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedot
     */
    'luontikohdeluokan-oid'?: string | null;
}
/**
 * 
 * @export
 * @interface AineistoLisaystiedotMetatiedot
 */
export interface AineistoLisaystiedotMetatiedot {
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'kuvaus'?: string;
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'rakennusosa'?: AineistoLisaystiedotMetatiedotRakennusosaEnum;
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'tila': AineistoLisaystiedotMetatiedotTilaEnum;
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'zip-polku'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'tekniikka-alat'?: Set<AineistoLisaystiedotMetatiedotTekniikkaAlatEnum>;
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'dokumenttityyppi': AineistoLisaystiedotMetatiedotDokumenttityyppiEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'sisaltaa-henkilotietoja': boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'laji': AineistoLisaystiedotMetatiedotLajiEnum;
    /**
     * 
     * @type {string}
     * @memberof AineistoLisaystiedotMetatiedot
     */
    'ryhma': AineistoLisaystiedotMetatiedotRyhmaEnum;
}

export const AineistoLisaystiedotMetatiedotRakennusosaEnum = {
    Ro285: 'rakennusosa/ro285',
    Ro391: 'rakennusosa/ro391',
    Ro105: 'rakennusosa/ro105',
    Ro466: 'rakennusosa/ro466',
    Ro366: 'rakennusosa/ro366',
    Ro450: 'rakennusosa/ro450',
    Ro344: 'rakennusosa/ro344',
    Ro430: 'rakennusosa/ro430',
    Ro03: 'rakennusosa/ro03',
    Ro107: 'rakennusosa/ro107',
    Ro145: 'rakennusosa/ro145',
    Ro447: 'rakennusosa/ro447',
    Ro150: 'rakennusosa/ro150',
    Ro87: 'rakennusosa/ro87',
    Ro28: 'rakennusosa/ro28',
    Ro206: 'rakennusosa/ro206',
    Ro19: 'rakennusosa/ro19',
    Ro23: 'rakennusosa/ro23',
    Ro234: 'rakennusosa/ro234',
    Ro343: 'rakennusosa/ro343',
    Ro236: 'rakennusosa/ro236',
    Ro146: 'rakennusosa/ro146',
    Ro441: 'rakennusosa/ro441',
    Ro384: 'rakennusosa/ro384',
    Ro98: 'rakennusosa/ro98',
    Ro415: 'rakennusosa/ro415',
    Ro167: 'rakennusosa/ro167',
    Ro250: 'rakennusosa/ro250',
    Ro238: 'rakennusosa/ro238',
    Ro231: 'rakennusosa/ro231',
    Ro232: 'rakennusosa/ro232',
    Ro305: 'rakennusosa/ro305',
    Ro117: 'rakennusosa/ro117',
    Ro252: 'rakennusosa/ro252',
    Ro47: 'rakennusosa/ro47',
    Ro114: 'rakennusosa/ro114',
    Ro288: 'rakennusosa/ro288',
    Ro456: 'rakennusosa/ro456',
    Ro86: 'rakennusosa/ro86',
    Ro203: 'rakennusosa/ro203',
    Ro154: 'rakennusosa/ro154',
    Ro255: 'rakennusosa/ro255',
    Ro218: 'rakennusosa/ro218',
    Ro367: 'rakennusosa/ro367',
    Ro438: 'rakennusosa/ro438',
    Ro301: 'rakennusosa/ro301',
    Ro66: 'rakennusosa/ro66',
    Ro223: 'rakennusosa/ro223',
    Ro73: 'rakennusosa/ro73',
    Ro274: 'rakennusosa/ro274',
    Ro303: 'rakennusosa/ro303',
    Ro284: 'rakennusosa/ro284',
    Ro402: 'rakennusosa/ro402',
    Ro217: 'rakennusosa/ro217',
    Ro410: 'rakennusosa/ro410',
    Ro315: 'rakennusosa/ro315',
    Ro97: 'rakennusosa/ro97',
    Ro186: 'rakennusosa/ro186',
    Ro411: 'rakennusosa/ro411',
    Ro94: 'rakennusosa/ro94',
    Ro195: 'rakennusosa/ro195',
    Ro408: 'rakennusosa/ro408',
    Ro196: 'rakennusosa/ro196',
    Ro372: 'rakennusosa/ro372',
    Ro326: 'rakennusosa/ro326',
    Ro63: 'rakennusosa/ro63',
    Ro172: 'rakennusosa/ro172',
    Ro44: 'rakennusosa/ro44',
    Ro16: 'rakennusosa/ro16',
    Ro01: 'rakennusosa/ro01',
    Ro379: 'rakennusosa/ro379',
    Ro256: 'rakennusosa/ro256',
    Ro388: 'rakennusosa/ro388',
    Ro335: 'rakennusosa/ro335',
    Ro464: 'rakennusosa/ro464',
    Ro398: 'rakennusosa/ro398',
    Ro454: 'rakennusosa/ro454',
    Ro262: 'rakennusosa/ro262',
    Ro226: 'rakennusosa/ro226',
    Ro423: 'rakennusosa/ro423',
    Ro267: 'rakennusosa/ro267',
    Ro184: 'rakennusosa/ro184',
    Ro439: 'rakennusosa/ro439',
    Ro281: 'rakennusosa/ro281',
    Ro368: 'rakennusosa/ro368',
    Ro90: 'rakennusosa/ro90',
    Ro45: 'rakennusosa/ro45',
    Ro235: 'rakennusosa/ro235',
    Ro182: 'rakennusosa/ro182',
    Ro324: 'rakennusosa/ro324',
    Ro453: 'rakennusosa/ro453',
    Ro139: 'rakennusosa/ro139',
    Ro424: 'rakennusosa/ro424',
    Ro296: 'rakennusosa/ro296',
    Ro89: 'rakennusosa/ro89',
    Ro177: 'rakennusosa/ro177',
    Ro213: 'rakennusosa/ro213',
    Ro392: 'rakennusosa/ro392',
    Ro270: 'rakennusosa/ro270',
    Ro330: 'rakennusosa/ro330',
    Ro163: 'rakennusosa/ro163',
    Ro04: 'rakennusosa/ro04',
    Ro443: 'rakennusosa/ro443',
    Ro80: 'rakennusosa/ro80',
    Ro128: 'rakennusosa/ro128',
    Ro377: 'rakennusosa/ro377',
    Ro164: 'rakennusosa/ro164',
    Ro143: 'rakennusosa/ro143',
    Ro205: 'rakennusosa/ro205',
    Ro414: 'rakennusosa/ro414',
    Ro451: 'rakennusosa/ro451',
    Ro109: 'rakennusosa/ro109',
    Ro70: 'rakennusosa/ro70',
    Ro161: 'rakennusosa/ro161',
    Ro459: 'rakennusosa/ro459',
    Ro436: 'rakennusosa/ro436',
    Ro401: 'rakennusosa/ro401',
    Ro62: 'rakennusosa/ro62',
    Ro396: 'rakennusosa/ro396',
    Ro248: 'rakennusosa/ro248',
    Ro266: 'rakennusosa/ro266',
    Ro207: 'rakennusosa/ro207',
    Ro243: 'rakennusosa/ro243',
    Ro201: 'rakennusosa/ro201',
    Ro445: 'rakennusosa/ro445',
    Ro397: 'rakennusosa/ro397',
    Ro370: 'rakennusosa/ro370',
    Ro22: 'rakennusosa/ro22',
    Ro32: 'rakennusosa/ro32',
    Ro299: 'rakennusosa/ro299',
    Ro425: 'rakennusosa/ro425',
    Ro263: 'rakennusosa/ro263',
    Ro130: 'rakennusosa/ro130',
    Ro279: 'rakennusosa/ro279',
    Ro187: 'rakennusosa/ro187',
    Ro258: 'rakennusosa/ro258',
    Ro126: 'rakennusosa/ro126',
    Ro140: 'rakennusosa/ro140',
    Ro119: 'rakennusosa/ro119',
    Ro240: 'rakennusosa/ro240',
    Ro48: 'rakennusosa/ro48',
    Ro348: 'rakennusosa/ro348',
    Ro209: 'rakennusosa/ro209',
    Ro452: 'rakennusosa/ro452',
    Ro337: 'rakennusosa/ro337',
    Ro59: 'rakennusosa/ro59',
    Ro273: 'rakennusosa/ro273',
    Ro91: 'rakennusosa/ro91',
    Ro95: 'rakennusosa/ro95',
    Ro27: 'rakennusosa/ro27',
    Ro292: 'rakennusosa/ro292',
    Ro297: 'rakennusosa/ro297',
    Ro239: 'rakennusosa/ro239',
    Ro320: 'rakennusosa/ro320',
    Ro347: 'rakennusosa/ro347',
    Ro57: 'rakennusosa/ro57',
    Ro178: 'rakennusosa/ro178',
    Ro319: 'rakennusosa/ro319',
    Ro332: 'rakennusosa/ro332',
    Ro419: 'rakennusosa/ro419',
    Ro375: 'rakennusosa/ro375',
    Ro434: 'rakennusosa/ro434',
    Ro168: 'rakennusosa/ro168',
    Ro334: 'rakennusosa/ro334',
    Ro104: 'rakennusosa/ro104',
    Ro64: 'rakennusosa/ro64',
    Ro137: 'rakennusosa/ro137',
    Ro429: 'rakennusosa/ro429',
    Ro49: 'rakennusosa/ro49',
    Ro254: 'rakennusosa/ro254',
    Ro369: 'rakennusosa/ro369',
    Ro81: 'rakennusosa/ro81',
    Ro82: 'rakennusosa/ro82',
    Ro444: 'rakennusosa/ro444',
    Ro08: 'rakennusosa/ro08',
    Ro125: 'rakennusosa/ro125',
    Ro176: 'rakennusosa/ro176',
    Ro220: 'rakennusosa/ro220',
    Ro153: 'rakennusosa/ro153',
    Ro75: 'rakennusosa/ro75',
    Ro457: 'rakennusosa/ro457',
    Ro147: 'rakennusosa/ro147',
    Ro122: 'rakennusosa/ro122',
    Ro152: 'rakennusosa/ro152',
    Ro245: 'rakennusosa/ro245',
    Ro173: 'rakennusosa/ro173',
    Ro275: 'rakennusosa/ro275',
    Ro387: 'rakennusosa/ro387',
    Ro462: 'rakennusosa/ro462',
    Ro241: 'rakennusosa/ro241',
    Ro357: 'rakennusosa/ro357',
    Ro264: 'rakennusosa/ro264',
    Ro237: 'rakennusosa/ro237',
    Ro356: 'rakennusosa/ro356',
    Ro112: 'rakennusosa/ro112',
    Ro403: 'rakennusosa/ro403',
    Ro25: 'rakennusosa/ro25',
    Ro405: 'rakennusosa/ro405',
    Ro431: 'rakennusosa/ro431',
    Ro136: 'rakennusosa/ro136',
    Ro158: 'rakennusosa/ro158',
    Ro135: 'rakennusosa/ro135',
    Ro449: 'rakennusosa/ro449',
    Ro302: 'rakennusosa/ro302',
    Ro69: 'rakennusosa/ro69',
    Ro433: 'rakennusosa/ro433',
    Ro458: 'rakennusosa/ro458',
    Ro479: 'rakennusosa/ro479',
    Ro342: 'rakennusosa/ro342',
    Ro395: 'rakennusosa/ro395',
    Ro317: 'rakennusosa/ro317',
    Ro259: 'rakennusosa/ro259',
    Ro472: 'rakennusosa/ro472',
    Ro21: 'rakennusosa/ro21',
    Ro349: 'rakennusosa/ro349',
    Ro229: 'rakennusosa/ro229',
    Ro362: 'rakennusosa/ro362',
    Ro253: 'rakennusosa/ro253',
    Ro306: 'rakennusosa/ro306',
    Ro378: 'rakennusosa/ro378',
    Ro05: 'rakennusosa/ro05',
    Ro448: 'rakennusosa/ro448',
    Ro33: 'rakennusosa/ro33',
    Ro54: 'rakennusosa/ro54',
    Ro353: 'rakennusosa/ro353',
    Ro210: 'rakennusosa/ro210',
    Ro272: 'rakennusosa/ro272',
    Ro194: 'rakennusosa/ro194',
    Ro131: 'rakennusosa/ro131',
    Ro93: 'rakennusosa/ro93',
    Ro123: 'rakennusosa/ro123',
    Ro208: 'rakennusosa/ro208',
    Ro463: 'rakennusosa/ro463',
    Ro426: 'rakennusosa/ro426',
    Ro413: 'rakennusosa/ro413',
    Ro287: 'rakennusosa/ro287',
    Ro300: 'rakennusosa/ro300',
    Ro312: 'rakennusosa/ro312',
    Ro170: 'rakennusosa/ro170',
    Ro339: 'rakennusosa/ro339',
    Ro198: 'rakennusosa/ro198',
    Ro336: 'rakennusosa/ro336',
    Ro211: 'rakennusosa/ro211',
    Ro36: 'rakennusosa/ro36',
    Ro84: 'rakennusosa/ro84',
    Ro199: 'rakennusosa/ro199',
    Ro371: 'rakennusosa/ro371',
    Ro92: 'rakennusosa/ro92',
    Ro179: 'rakennusosa/ro179',
    Ro106: 'rakennusosa/ro106',
    Ro103: 'rakennusosa/ro103',
    Ro331: 'rakennusosa/ro331',
    Ro156: 'rakennusosa/ro156',
    Ro313: 'rakennusosa/ro313',
    Ro298: 'rakennusosa/ro298',
    Ro111: 'rakennusosa/ro111',
    Ro204: 'rakennusosa/ro204',
    Ro286: 'rakennusosa/ro286',
    Ro293: 'rakennusosa/ro293',
    Ro271: 'rakennusosa/ro271',
    Ro53: 'rakennusosa/ro53',
    Ro108: 'rakennusosa/ro108',
    Ro359: 'rakennusosa/ro359',
    Ro61: 'rakennusosa/ro61',
    Ro469: 'rakennusosa/ro469',
    Ro157: 'rakennusosa/ro157',
    Ro02: 'rakennusosa/ro02',
    Ro102: 'rakennusosa/ro102',
    Ro188: 'rakennusosa/ro188',
    Ro280: 'rakennusosa/ro280',
    Ro185: 'rakennusosa/ro185',
    Ro467: 'rakennusosa/ro467',
    Ro17: 'rakennusosa/ro17',
    Ro29: 'rakennusosa/ro29',
    Ro58: 'rakennusosa/ro58',
    Ro278: 'rakennusosa/ro278',
    Ro432: 'rakennusosa/ro432',
    Ro26: 'rakennusosa/ro26',
    Ro309: 'rakennusosa/ro309',
    Ro455: 'rakennusosa/ro455',
    Ro323: 'rakennusosa/ro323',
    Ro43: 'rakennusosa/ro43',
    Ro227: 'rakennusosa/ro227',
    Ro132: 'rakennusosa/ro132',
    Ro228: 'rakennusosa/ro228',
    Ro242: 'rakennusosa/ro242',
    Ro189: 'rakennusosa/ro189',
    Ro465: 'rakennusosa/ro465',
    Ro215: 'rakennusosa/ro215',
    Ro202: 'rakennusosa/ro202',
    Ro07: 'rakennusosa/ro07',
    Ro338: 'rakennusosa/ro338',
    Ro212: 'rakennusosa/ro212',
    Ro134: 'rakennusosa/ro134',
    Ro67: 'rakennusosa/ro67',
    Ro269: 'rakennusosa/ro269',
    Ro355: 'rakennusosa/ro355',
    Ro222: 'rakennusosa/ro222',
    Ro141: 'rakennusosa/ro141',
    Ro475: 'rakennusosa/ro475',
    Ro39: 'rakennusosa/ro39',
    Ro474: 'rakennusosa/ro474',
    Ro282: 'rakennusosa/ro282',
    Ro77: 'rakennusosa/ro77',
    Ro72: 'rakennusosa/ro72',
    Ro46: 'rakennusosa/ro46',
    Ro321: 'rakennusosa/ro321',
    Ro200: 'rakennusosa/ro200',
    Ro116: 'rakennusosa/ro116',
    Ro471: 'rakennusosa/ro471',
    Ro390: 'rakennusosa/ro390',
    Ro470: 'rakennusosa/ro470',
    Ro440: 'rakennusosa/ro440',
    Ro249: 'rakennusosa/ro249',
    Ro190: 'rakennusosa/ro190',
    Ro180: 'rakennusosa/ro180',
    Ro476: 'rakennusosa/ro476',
    Ro50: 'rakennusosa/ro50',
    Ro230: 'rakennusosa/ro230',
    Ro160: 'rakennusosa/ro160',
    Ro247: 'rakennusosa/ro247',
    Ro30: 'rakennusosa/ro30',
    Ro295: 'rakennusosa/ro295',
    Ro352: 'rakennusosa/ro352',
    Ro389: 'rakennusosa/ro389',
    Ro121: 'rakennusosa/ro121',
    Ro308: 'rakennusosa/ro308',
    Ro115: 'rakennusosa/ro115',
    Ro404: 'rakennusosa/ro404',
    Ro364: 'rakennusosa/ro364',
    Ro38: 'rakennusosa/ro38',
    Ro283: 'rakennusosa/ro283',
    Ro183: 'rakennusosa/ro183',
    Ro399: 'rakennusosa/ro399',
    Ro221: 'rakennusosa/ro221',
    Ro418: 'rakennusosa/ro418',
    Ro83: 'rakennusosa/ro83',
    Ro360: 'rakennusosa/ro360',
    Ro149: 'rakennusosa/ro149',
    Ro386: 'rakennusosa/ro386',
    Ro120: 'rakennusosa/ro120',
    Ro24: 'rakennusosa/ro24',
    Ro35: 'rakennusosa/ro35',
    Ro113: 'rakennusosa/ro113',
    Ro268: 'rakennusosa/ro268',
    Ro78: 'rakennusosa/ro78',
    Ro155: 'rakennusosa/ro155',
    Ro468: 'rakennusosa/ro468',
    Ro382: 'rakennusosa/ro382',
    Ro291: 'rakennusosa/ro291',
    Ro325: 'rakennusosa/ro325',
    Ro192: 'rakennusosa/ro192',
    Ro76: 'rakennusosa/ro76',
    Ro351: 'rakennusosa/ro351',
    Ro473: 'rakennusosa/ro473',
    Ro307: 'rakennusosa/ro307',
    Ro376: 'rakennusosa/ro376',
    Ro174: 'rakennusosa/ro174',
    Ro71: 'rakennusosa/ro71',
    Ro99: 'rakennusosa/ro99',
    Ro380: 'rakennusosa/ro380',
    Ro374: 'rakennusosa/ro374',
    Ro327: 'rakennusosa/ro327',
    Ro31: 'rakennusosa/ro31',
    Ro100: 'rakennusosa/ro100',
    Ro13: 'rakennusosa/ro13',
    Ro400: 'rakennusosa/ro400',
    Ro37: 'rakennusosa/ro37',
    Ro361: 'rakennusosa/ro361',
    Ro144: 'rakennusosa/ro144',
    Ro417: 'rakennusosa/ro417',
    Ro289: 'rakennusosa/ro289',
    Ro214: 'rakennusosa/ro214',
    Ro314: 'rakennusosa/ro314',
    Ro383: 'rakennusosa/ro383',
    Ro437: 'rakennusosa/ro437',
    Ro09: 'rakennusosa/ro09',
    Ro225: 'rakennusosa/ro225',
    Ro55: 'rakennusosa/ro55',
    Ro311: 'rakennusosa/ro311',
    Ro409: 'rakennusosa/ro409',
    Ro224: 'rakennusosa/ro224',
    Ro304: 'rakennusosa/ro304',
    Ro244: 'rakennusosa/ro244',
    Ro276: 'rakennusosa/ro276',
    Ro151: 'rakennusosa/ro151',
    Ro420: 'rakennusosa/ro420',
    Ro20: 'rakennusosa/ro20',
    Ro74: 'rakennusosa/ro74',
    Ro412: 'rakennusosa/ro412',
    Ro260: 'rakennusosa/ro260',
    Ro363: 'rakennusosa/ro363',
    Ro181: 'rakennusosa/ro181',
    Ro358: 'rakennusosa/ro358',
    Ro12: 'rakennusosa/ro12',
    Ro265: 'rakennusosa/ro265',
    Ro00: 'rakennusosa/ro00',
    Ro138: 'rakennusosa/ro138',
    Ro393: 'rakennusosa/ro393',
    Ro148: 'rakennusosa/ro148',
    Ro385: 'rakennusosa/ro385',
    Ro381: 'rakennusosa/ro381',
    Ro316: 'rakennusosa/ro316',
    Ro142: 'rakennusosa/ro142',
    Ro277: 'rakennusosa/ro277',
    Ro407: 'rakennusosa/ro407',
    Ro96: 'rakennusosa/ro96',
    Ro133: 'rakennusosa/ro133',
    Ro246: 'rakennusosa/ro246',
    Ro406: 'rakennusosa/ro406',
    Ro110: 'rakennusosa/ro110',
    Ro34: 'rakennusosa/ro34',
    Ro175: 'rakennusosa/ro175',
    Ro159: 'rakennusosa/ro159',
    Ro42: 'rakennusosa/ro42',
    Ro06: 'rakennusosa/ro06',
    Ro261: 'rakennusosa/ro261',
    Ro166: 'rakennusosa/ro166',
    Ro446: 'rakennusosa/ro446',
    Ro118: 'rakennusosa/ro118',
    Ro10: 'rakennusosa/ro10',
    Ro193: 'rakennusosa/ro193',
    Ro171: 'rakennusosa/ro171',
    Ro65: 'rakennusosa/ro65',
    Ro428: 'rakennusosa/ro428',
    Ro328: 'rakennusosa/ro328',
    Ro165: 'rakennusosa/ro165',
    Ro394: 'rakennusosa/ro394',
    Ro333: 'rakennusosa/ro333',
    Ro127: 'rakennusosa/ro127',
    Ro68: 'rakennusosa/ro68',
    Ro257: 'rakennusosa/ro257',
    Ro322: 'rakennusosa/ro322',
    Ro219: 'rakennusosa/ro219',
    Ro416: 'rakennusosa/ro416',
    Ro341: 'rakennusosa/ro341',
    Ro169: 'rakennusosa/ro169',
    Ro52: 'rakennusosa/ro52',
    Ro88: 'rakennusosa/ro88',
    Ro60: 'rakennusosa/ro60',
    Ro290: 'rakennusosa/ro290',
    Ro365: 'rakennusosa/ro365',
    Ro422: 'rakennusosa/ro422',
    Ro340: 'rakennusosa/ro340',
    Ro427: 'rakennusosa/ro427',
    Ro11: 'rakennusosa/ro11',
    Ro233: 'rakennusosa/ro233',
    Ro310: 'rakennusosa/ro310',
    Ro373: 'rakennusosa/ro373',
    Ro294: 'rakennusosa/ro294',
    Ro40: 'rakennusosa/ro40',
    Ro318: 'rakennusosa/ro318',
    Ro14: 'rakennusosa/ro14',
    Ro15: 'rakennusosa/ro15',
    Ro191: 'rakennusosa/ro191',
    Ro354: 'rakennusosa/ro354',
    Ro435: 'rakennusosa/ro435',
    Ro41: 'rakennusosa/ro41',
    Ro129: 'rakennusosa/ro129',
    Ro477: 'rakennusosa/ro477',
    Ro251: 'rakennusosa/ro251',
    Ro345: 'rakennusosa/ro345',
    Ro350: 'rakennusosa/ro350',
    Ro124: 'rakennusosa/ro124',
    Ro101: 'rakennusosa/ro101',
    Ro216: 'rakennusosa/ro216',
    Ro162: 'rakennusosa/ro162',
    Ro56: 'rakennusosa/ro56',
    Ro85: 'rakennusosa/ro85',
    Ro329: 'rakennusosa/ro329',
    Ro346: 'rakennusosa/ro346',
    Ro442: 'rakennusosa/ro442',
    Ro18: 'rakennusosa/ro18',
    Ro51: 'rakennusosa/ro51',
    Ro421: 'rakennusosa/ro421',
    Ro197: 'rakennusosa/ro197',
    Ro79: 'rakennusosa/ro79'
} as const;

export type AineistoLisaystiedotMetatiedotRakennusosaEnum = typeof AineistoLisaystiedotMetatiedotRakennusosaEnum[keyof typeof AineistoLisaystiedotMetatiedotRakennusosaEnum];
export const AineistoLisaystiedotMetatiedotTilaEnum = {
    Tila02: 'aineistotila/tila02',
    Tila03: 'aineistotila/tila03',
    Tila01: 'aineistotila/tila01'
} as const;

export type AineistoLisaystiedotMetatiedotTilaEnum = typeof AineistoLisaystiedotMetatiedotTilaEnum[keyof typeof AineistoLisaystiedotMetatiedotTilaEnum];
export const AineistoLisaystiedotMetatiedotTekniikkaAlatEnum = {
    Ta15: 'tekniikka-ala/ta15',
    Ta10: 'tekniikka-ala/ta10',
    Ta09: 'tekniikka-ala/ta09',
    Ta02: 'tekniikka-ala/ta02',
    Ta04: 'tekniikka-ala/ta04',
    Ta16: 'tekniikka-ala/ta16',
    Ta05: 'tekniikka-ala/ta05',
    Ta03: 'tekniikka-ala/ta03',
    Ta07: 'tekniikka-ala/ta07',
    Ta12: 'tekniikka-ala/ta12',
    Ta08: 'tekniikka-ala/ta08',
    Ta13: 'tekniikka-ala/ta13',
    Ta14: 'tekniikka-ala/ta14',
    Ta11: 'tekniikka-ala/ta11',
    Ta06: 'tekniikka-ala/ta06',
    Ta00: 'tekniikka-ala/ta00',
    Ta01: 'tekniikka-ala/ta01'
} as const;

export type AineistoLisaystiedotMetatiedotTekniikkaAlatEnum = typeof AineistoLisaystiedotMetatiedotTekniikkaAlatEnum[keyof typeof AineistoLisaystiedotMetatiedotTekniikkaAlatEnum];
export const AineistoLisaystiedotMetatiedotDokumenttityyppiEnum = {
    Dt05: 'dokumenttityyppi/dt05',
    Dt100: 'dokumenttityyppi/dt100',
    Dt25: 'dokumenttityyppi/dt25',
    Dt49: 'dokumenttityyppi/dt49',
    Dt105: 'dokumenttityyppi/dt105',
    Dt115: 'dokumenttityyppi/dt115',
    Dt63: 'dokumenttityyppi/dt63',
    Dt13: 'dokumenttityyppi/dt13',
    Dt57: 'dokumenttityyppi/dt57',
    Dt74: 'dokumenttityyppi/dt74',
    Dt53: 'dokumenttityyppi/dt53',
    Dt107: 'dokumenttityyppi/dt107',
    Dt09: 'dokumenttityyppi/dt09',
    Dt42: 'dokumenttityyppi/dt42',
    Dt97: 'dokumenttityyppi/dt97',
    Dt26: 'dokumenttityyppi/dt26',
    Dt109: 'dokumenttityyppi/dt109',
    Dt116: 'dokumenttityyppi/dt116',
    Dt24: 'dokumenttityyppi/dt24',
    Dt88: 'dokumenttityyppi/dt88',
    Dt111: 'dokumenttityyppi/dt111',
    Dt75: 'dokumenttityyppi/dt75',
    Dt11: 'dokumenttityyppi/dt11',
    Dt59: 'dokumenttityyppi/dt59',
    Dt30: 'dokumenttityyppi/dt30',
    Dt62: 'dokumenttityyppi/dt62',
    Dt79: 'dokumenttityyppi/dt79',
    Dt103: 'dokumenttityyppi/dt103',
    Dt69: 'dokumenttityyppi/dt69',
    Dt90: 'dokumenttityyppi/dt90',
    Dt18: 'dokumenttityyppi/dt18',
    Dt101: 'dokumenttityyppi/dt101',
    Dt20: 'dokumenttityyppi/dt20',
    Dt16: 'dokumenttityyppi/dt16',
    Dt36: 'dokumenttityyppi/dt36',
    Dt117: 'dokumenttityyppi/dt117',
    Dt43: 'dokumenttityyppi/dt43',
    Dt99: 'dokumenttityyppi/dt99',
    Dt02: 'dokumenttityyppi/dt02',
    Dt98: 'dokumenttityyppi/dt98',
    Dt113: 'dokumenttityyppi/dt113',
    Dt64: 'dokumenttityyppi/dt64',
    Dt68: 'dokumenttityyppi/dt68',
    Dt71: 'dokumenttityyppi/dt71',
    Dt112: 'dokumenttityyppi/dt112',
    Dt104: 'dokumenttityyppi/dt104',
    Dt44: 'dokumenttityyppi/dt44',
    Dt93: 'dokumenttityyppi/dt93',
    Dt108: 'dokumenttityyppi/dt108',
    Dt21: 'dokumenttityyppi/dt21',
    Dt17: 'dokumenttityyppi/dt17',
    Dt77: 'dokumenttityyppi/dt77',
    Dt110: 'dokumenttityyppi/dt110',
    Dt01: 'dokumenttityyppi/dt01',
    Dt73: 'dokumenttityyppi/dt73',
    Dt61: 'dokumenttityyppi/dt61',
    Dt35: 'dokumenttityyppi/dt35',
    Dt56: 'dokumenttityyppi/dt56',
    Dt31: 'dokumenttityyppi/dt31',
    Dt32: 'dokumenttityyppi/dt32',
    Dt102: 'dokumenttityyppi/dt102',
    Dt96: 'dokumenttityyppi/dt96',
    Dt07: 'dokumenttityyppi/dt07',
    Dt22: 'dokumenttityyppi/dt22',
    Dt106: 'dokumenttityyppi/dt106',
    Dt114: 'dokumenttityyppi/dt114',
    Dt15: 'dokumenttityyppi/dt15',
    Dt47: 'dokumenttityyppi/dt47',
    Dt87: 'dokumenttityyppi/dt87'
} as const;

export type AineistoLisaystiedotMetatiedotDokumenttityyppiEnum = typeof AineistoLisaystiedotMetatiedotDokumenttityyppiEnum[keyof typeof AineistoLisaystiedotMetatiedotDokumenttityyppiEnum];
export const AineistoLisaystiedotMetatiedotLajiEnum = {
    Al05: 'aineistolaji/al05',
    Al12: 'aineistolaji/al12',
    Al07: 'aineistolaji/al07',
    Al03: 'aineistolaji/al03',
    Al14: 'aineistolaji/al14',
    Al21: 'aineistolaji/al21',
    Al00: 'aineistolaji/al00',
    Al06: 'aineistolaji/al06',
    Al26: 'aineistolaji/al26',
    Al23: 'aineistolaji/al23',
    Al41: 'aineistolaji/al41',
    Al35: 'aineistolaji/al35',
    Al32: 'aineistolaji/al32',
    Al20: 'aineistolaji/al20',
    Al36: 'aineistolaji/al36',
    Al31: 'aineistolaji/al31',
    Al15: 'aineistolaji/al15',
    Al13: 'aineistolaji/al13',
    Al18: 'aineistolaji/al18',
    Al40: 'aineistolaji/al40',
    Al17: 'aineistolaji/al17',
    Al33: 'aineistolaji/al33',
    Al38: 'aineistolaji/al38',
    Al16: 'aineistolaji/al16',
    Al37: 'aineistolaji/al37',
    Al19: 'aineistolaji/al19',
    Al24: 'aineistolaji/al24',
    Al30: 'aineistolaji/al30',
    Al01: 'aineistolaji/al01',
    Al22: 'aineistolaji/al22',
    Al34: 'aineistolaji/al34',
    Al39: 'aineistolaji/al39',
    Al08: 'aineistolaji/al08',
    Al09: 'aineistolaji/al09',
    Al25: 'aineistolaji/al25'
} as const;

export type AineistoLisaystiedotMetatiedotLajiEnum = typeof AineistoLisaystiedotMetatiedotLajiEnum[keyof typeof AineistoLisaystiedotMetatiedotLajiEnum];
export const AineistoLisaystiedotMetatiedotRyhmaEnum = {
    Ar06: 'aineistoryhma/ar06',
    Ar07: 'aineistoryhma/ar07',
    Ar10: 'aineistoryhma/ar10',
    Ar03: 'aineistoryhma/ar03',
    Ar02: 'aineistoryhma/ar02',
    Ar00: 'aineistoryhma/ar00',
    Ar04: 'aineistoryhma/ar04',
    Ar09: 'aineistoryhma/ar09',
    Ar05: 'aineistoryhma/ar05',
    Ar08: 'aineistoryhma/ar08'
} as const;

export type AineistoLisaystiedotMetatiedotRyhmaEnum = typeof AineistoLisaystiedotMetatiedotRyhmaEnum[keyof typeof AineistoLisaystiedotMetatiedotRyhmaEnum];

/**
 * 
 * @export
 * @interface AineistoOperaatioOperaatiot
 */
export interface AineistoOperaatioOperaatiot {
    /**
     * 
     * @type {string}
     * @memberof AineistoOperaatioOperaatiot
     */
    'tila': AineistoOperaatioOperaatiotTilaEnum;
    /**
     * 
     * @type {string}
     * @memberof AineistoOperaatioOperaatiot
     */
    'aloitettu'?: string;
    /**
     * 
     * @type {string}
     * @memberof AineistoOperaatioOperaatiot
     */
    'paattynyt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AineistoOperaatioOperaatiot
     */
    'selite'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AineistoOperaatioOperaatiot
     */
    'aineistot'?: Array<string>;
}

export const AineistoOperaatioOperaatiotTilaEnum = {
    PakkausKaynnissa: 'pakkaus-kaynnissa',
    PurkuKaynnissa: 'purku-kaynnissa',
    Virhe: 'virhe',
    PurkuValmis: 'purku-valmis',
    PakkausValmis: 'pakkaus-valmis'
} as const;

export type AineistoOperaatioOperaatiotTilaEnum = typeof AineistoOperaatioOperaatiotTilaEnum[keyof typeof AineistoOperaatioOperaatiotTilaEnum];

/**
 * 
 * @export
 * @interface AineistoPaivitystiedot
 */
export interface AineistoPaivitystiedot {
    /**
     * 
     * @type {AineistoLisaystiedotMetatiedot}
     * @memberof AineistoPaivitystiedot
     */
    'metatiedot': AineistoLisaystiedotMetatiedot;
    /**
     * 
     * @type {number}
     * @memberof AineistoPaivitystiedot
     */
    'schemaversio': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof AineistoPaivitystiedot
     */
    'linkit': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AineistoPaivitystiedot
     */
    'luontikohdeluokan-oid'?: string | null;
}
/**
 * 
 * @export
 * @interface AineistoViittaus
 */
export interface AineistoViittaus {
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'muokattu': string | null;
    /**
     * 
     * @type {object}
     * @memberof AineistoViittaus
     */
    'lahdejarjestelma': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof AineistoViittaus
     */
    'paattyen': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'oid': string;
    /**
     * 
     * @type {AineistoAineistoLuoja}
     * @memberof AineistoViittaus
     */
    'luoja': AineistoAineistoLuoja | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AineistoViittaus
     */
    'linkit': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AineistoViittaus
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof AineistoViittaus
     */
    'alkaen': object | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'sisalto': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {AineistoAineistoLuoja}
     * @memberof AineistoViittaus
     */
    'muokkaaja': AineistoAineistoLuoja | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'luotu': string;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'luontikohdeluokan-oid'?: string;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'lahdejarjestelman-id': string | null;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'sijainti-muu'?: string;
    /**
     * 
     * @type {string}
     * @memberof AineistoViittaus
     */
    'sijainti-url'?: string;
}
/**
 * 
 * @export
 * @interface AineistopalveluApiV1LatauspakettiPost200Response
 */
export interface AineistopalveluApiV1LatauspakettiPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AineistopalveluApiV1LatauspakettiPost200Response
     */
    'paketti-oid': string;
}
/**
 * 
 * @export
 * @interface AineistopalveluApiV1MassakloonausAineistoPostRequest
 */
export interface AineistopalveluApiV1MassakloonausAineistoPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AineistopalveluApiV1MassakloonausAineistoPostRequest
     */
    'kohdetoimeksiannon-oid': string;
    /**
     * 
     * @type {Set<string>}
     * @memberof AineistopalveluApiV1MassakloonausAineistoPostRequest
     */
    'lahdeaineistojen-oidit': Set<string>;
}
/**
 * 
 * @export
 * @interface ViittausLisaystiedot
 */
export interface ViittausLisaystiedot {
    /**
     * 
     * @type {number}
     * @memberof ViittausLisaystiedot
     */
    'schemaversio': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ViittausLisaystiedot
     */
    'linkit': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ViittausLisaystiedot
     */
    'sisalto': string;
    /**
     * 
     * @type {string}
     * @memberof ViittausLisaystiedot
     */
    'sijainti-url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ViittausLisaystiedot
     */
    'sijainti-muu'?: string;
    /**
     * 
     * @type {string}
     * @memberof ViittausLisaystiedot
     */
    'luontikohdeluokan-oid'?: string;
}
/**
 * 
 * @export
 * @interface ViittausPaivitystiedot
 */
export interface ViittausPaivitystiedot {
    /**
     * 
     * @type {number}
     * @memberof ViittausPaivitystiedot
     */
    'schemaversio': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ViittausPaivitystiedot
     */
    'linkit': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ViittausPaivitystiedot
     */
    'sisalto': string;
    /**
     * 
     * @type {string}
     * @memberof ViittausPaivitystiedot
     */
    'sijainti-url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ViittausPaivitystiedot
     */
    'sijainti-muu'?: string;
    /**
     * 
     * @type {string}
     * @memberof ViittausPaivitystiedot
     */
    'luontikohdeluokan-oid'?: string;
}

/**
 * AineistoApi - axios parameter creator
 * @export
 */
export const AineistoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listaa kaikki aineistot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aineistopalvelu/api/v1/aineisto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poistaa aineiston.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDelete: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidDelete', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa oid:llä määritellyn aineiston tiedot.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidGet', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Päivittää aineiston metatiedot.                       Palauttaa aineiston (kaikki) tiedot.
         * @param {string} oid 
         * @param {AineistoPaivitystiedot} aineistoPaivitystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidPut: async (oid: string, aineistoPaivitystiedot: AineistoPaivitystiedot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidPut', 'oid', oid)
            // verify required parameter 'aineistoPaivitystiedot' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidPut', 'aineistoPaivitystiedot', aineistoPaivitystiedot)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aineistoPaivitystiedot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Luo uuden aineiston annetuilla metatiedoilla.                        Palauttaa aineiston (kaikki) tiedot sisältäen sille generoidun OIDin.
         * @param {AineistoLisaystiedot} aineistoLisaystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoPost: async (aineistoLisaystiedot: AineistoLisaystiedot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aineistoLisaystiedot' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoPost', 'aineistoLisaystiedot', aineistoLisaystiedot)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aineistoLisaystiedot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary kloonaa annatut aineistot kohdetoimeksiannolle
         * @param {AineistopalveluApiV1MassakloonausAineistoPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1MassakloonausAineistoPost: async (body: AineistopalveluApiV1MassakloonausAineistoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aineistopalveluApiV1MassakloonausAineistoPost', 'body', body)
            const localVarPath = `/aineistopalvelu/api/v1/massakloonaus/aineisto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AineistoApi - functional programming interface
 * @export
 */
export const AineistoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AineistoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listaa kaikki aineistot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poistaa aineiston.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidDelete(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidDelete(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa oid:llä määritellyn aineiston tiedot.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoAineisto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Päivittää aineiston metatiedot.                       Palauttaa aineiston (kaikki) tiedot.
         * @param {string} oid 
         * @param {AineistoPaivitystiedot} aineistoPaivitystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidPut(oid: string, aineistoPaivitystiedot: AineistoPaivitystiedot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoAineisto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidPut(oid, aineistoPaivitystiedot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Luo uuden aineiston annetuilla metatiedoilla.                        Palauttaa aineiston (kaikki) tiedot sisältäen sille generoidun OIDin.
         * @param {AineistoLisaystiedot} aineistoLisaystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoPost(aineistoLisaystiedot: AineistoLisaystiedot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoAineisto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoPost(aineistoLisaystiedot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary kloonaa annatut aineistot kohdetoimeksiannolle
         * @param {AineistopalveluApiV1MassakloonausAineistoPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1MassakloonausAineistoPost(body: AineistopalveluApiV1MassakloonausAineistoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AineistoAineisto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1MassakloonausAineistoPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AineistoApi - factory interface
 * @export
 */
export const AineistoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AineistoApiFp(configuration)
    return {
        /**
         * 
         * @summary Listaa kaikki aineistot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.aineistopalveluApiV1AineistoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poistaa aineiston.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDelete(oid: string, options?: any): AxiosPromise<void> {
            return localVarFp.aineistopalveluApiV1AineistoOidDelete(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa oid:llä määritellyn aineiston tiedot.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidGet(oid: string, options?: any): AxiosPromise<AineistoAineisto> {
            return localVarFp.aineistopalveluApiV1AineistoOidGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Päivittää aineiston metatiedot.                       Palauttaa aineiston (kaikki) tiedot.
         * @param {string} oid 
         * @param {AineistoPaivitystiedot} aineistoPaivitystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidPut(oid: string, aineistoPaivitystiedot: AineistoPaivitystiedot, options?: any): AxiosPromise<AineistoAineisto> {
            return localVarFp.aineistopalveluApiV1AineistoOidPut(oid, aineistoPaivitystiedot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Luo uuden aineiston annetuilla metatiedoilla.                        Palauttaa aineiston (kaikki) tiedot sisältäen sille generoidun OIDin.
         * @param {AineistoLisaystiedot} aineistoLisaystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoPost(aineistoLisaystiedot: AineistoLisaystiedot, options?: any): AxiosPromise<AineistoAineisto> {
            return localVarFp.aineistopalveluApiV1AineistoPost(aineistoLisaystiedot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary kloonaa annatut aineistot kohdetoimeksiannolle
         * @param {AineistopalveluApiV1MassakloonausAineistoPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1MassakloonausAineistoPost(body: AineistopalveluApiV1MassakloonausAineistoPostRequest, options?: any): AxiosPromise<Array<AineistoAineisto>> {
            return localVarFp.aineistopalveluApiV1MassakloonausAineistoPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AineistoApi - object-oriented interface
 * @export
 * @class AineistoApi
 * @extends {BaseAPI}
 */
export class AineistoApi extends BaseAPI {
    /**
     * 
     * @summary Listaa kaikki aineistot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AineistoApi
     */
    public aineistopalveluApiV1AineistoGet(options?: AxiosRequestConfig) {
        return AineistoApiFp(this.configuration).aineistopalveluApiV1AineistoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poistaa aineiston.
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AineistoApi
     */
    public aineistopalveluApiV1AineistoOidDelete(oid: string, options?: AxiosRequestConfig) {
        return AineistoApiFp(this.configuration).aineistopalveluApiV1AineistoOidDelete(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa oid:llä määritellyn aineiston tiedot.
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AineistoApi
     */
    public aineistopalveluApiV1AineistoOidGet(oid: string, options?: AxiosRequestConfig) {
        return AineistoApiFp(this.configuration).aineistopalveluApiV1AineistoOidGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Päivittää aineiston metatiedot.                       Palauttaa aineiston (kaikki) tiedot.
     * @param {string} oid 
     * @param {AineistoPaivitystiedot} aineistoPaivitystiedot 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AineistoApi
     */
    public aineistopalveluApiV1AineistoOidPut(oid: string, aineistoPaivitystiedot: AineistoPaivitystiedot, options?: AxiosRequestConfig) {
        return AineistoApiFp(this.configuration).aineistopalveluApiV1AineistoOidPut(oid, aineistoPaivitystiedot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Luo uuden aineiston annetuilla metatiedoilla.                        Palauttaa aineiston (kaikki) tiedot sisältäen sille generoidun OIDin.
     * @param {AineistoLisaystiedot} aineistoLisaystiedot 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AineistoApi
     */
    public aineistopalveluApiV1AineistoPost(aineistoLisaystiedot: AineistoLisaystiedot, options?: AxiosRequestConfig) {
        return AineistoApiFp(this.configuration).aineistopalveluApiV1AineistoPost(aineistoLisaystiedot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary kloonaa annatut aineistot kohdetoimeksiannolle
     * @param {AineistopalveluApiV1MassakloonausAineistoPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AineistoApi
     */
    public aineistopalveluApiV1MassakloonausAineistoPost(body: AineistopalveluApiV1MassakloonausAineistoPostRequest, options?: AxiosRequestConfig) {
        return AineistoApiFp(this.configuration).aineistopalveluApiV1MassakloonausAineistoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DokumenttiApi - axios parameter creator
 * @export
 */
export const DokumenttiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Palauttaa uuden dokumentin lähettämiseen tarvittavan upload-sivun rungon.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet: async (oid: string, tiedosto: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet', 'oid', oid)
            // verify required parameter 'tiedosto' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet', 'tiedosto', tiedosto)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}/dokumentin-lahetyssivu/{tiedosto}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"tiedosto"}}`, encodeURIComponent(String(tiedosto)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa olemassaolevan dokumentin sisällön päivittämiseen tarvittavat tiedot (S3 upload form).                   Valinnaiset dokumenttikohtaiset metatiedot annetaan query-parametreinä (?kuvaus=foobar&...), ks. /dokumentin-metatietokuvaus.                   Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle, ja ladattavan tiedoston                   nimen tulee vastata tälle kutsulle annettua parametria.                   Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet: async (oid: string, tiedosto: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet', 'oid', oid)
            // verify required parameter 'tiedosto' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet', 'tiedosto', tiedosto)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}/dokumentin-lahetystiedot/{tiedosto}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"tiedosto"}}`, encodeURIComponent(String(tiedosto)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tekee redirectin annetun aineiston annettuun dokumenttiin (ja tarvittaessa tiettyyn versioon)
         * @param {string} oid 
         * @param {string} [versio] 
         * @param {boolean} [liite] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDokumenttiGet: async (oid: string, versio?: string, liite?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidDokumenttiGet', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}/dokumentti`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versio !== undefined) {
                localVarQueryParameter['versio'] = versio;
            }

            if (liite !== undefined) {
                localVarQueryParameter['liite'] = liite;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poistaa aineistosta siinä olevan linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete: async (oid: string, kohdeOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete', 'oid', oid)
            // verify required parameter 'kohdeOid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete', 'kohdeOid', kohdeOid)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}/linkit/{kohde-oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"kohde-oid"}}`, encodeURIComponent(String(kohdeOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lisää aineistoon linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidLinkitKohdeOidPost: async (oid: string, kohdeOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidLinkitKohdeOidPost', 'oid', oid)
            // verify required parameter 'kohdeOid' is not null or undefined
            assertParamExists('aineistopalveluApiV1AineistoOidLinkitKohdeOidPost', 'kohdeOid', kohdeOid)
            const localVarPath = `/aineistopalvelu/api/v1/aineisto/{oid}/linkit/{kohde-oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"kohde-oid"}}`, encodeURIComponent(String(kohdeOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DokumenttiApi - functional programming interface
 * @export
 */
export const DokumenttiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DokumenttiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Palauttaa uuden dokumentin lähettämiseen tarvittavan upload-sivun rungon.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet(oid: string, tiedosto: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet(oid, tiedosto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa olemassaolevan dokumentin sisällön päivittämiseen tarvittavat tiedot (S3 upload form).                   Valinnaiset dokumenttikohtaiset metatiedot annetaan query-parametreinä (?kuvaus=foobar&...), ks. /dokumentin-metatietokuvaus.                   Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle, ja ladattavan tiedoston                   nimen tulee vastata tälle kutsulle annettua parametria.                   Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet(oid: string, tiedosto: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet(oid, tiedosto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tekee redirectin annetun aineiston annettuun dokumenttiin (ja tarvittaessa tiettyyn versioon)
         * @param {string} oid 
         * @param {string} [versio] 
         * @param {boolean} [liite] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidDokumenttiGet(oid: string, versio?: string, liite?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidDokumenttiGet(oid, versio, liite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poistaa aineistosta siinä olevan linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete(oid: string, kohdeOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoAineisto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete(oid, kohdeOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lisää aineistoon linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1AineistoOidLinkitKohdeOidPost(oid: string, kohdeOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoAineisto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1AineistoOidLinkitKohdeOidPost(oid, kohdeOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DokumenttiApi - factory interface
 * @export
 */
export const DokumenttiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DokumenttiApiFp(configuration)
    return {
        /**
         * 
         * @summary Palauttaa uuden dokumentin lähettämiseen tarvittavan upload-sivun rungon.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet(oid: string, tiedosto: string, options?: any): AxiosPromise<void> {
            return localVarFp.aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet(oid, tiedosto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa olemassaolevan dokumentin sisällön päivittämiseen tarvittavat tiedot (S3 upload form).                   Valinnaiset dokumenttikohtaiset metatiedot annetaan query-parametreinä (?kuvaus=foobar&...), ks. /dokumentin-metatietokuvaus.                   Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle, ja ladattavan tiedoston                   nimen tulee vastata tälle kutsulle annettua parametria.                   Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet(oid: string, tiedosto: string, options?: any): AxiosPromise<void> {
            return localVarFp.aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet(oid, tiedosto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tekee redirectin annetun aineiston annettuun dokumenttiin (ja tarvittaessa tiettyyn versioon)
         * @param {string} oid 
         * @param {string} [versio] 
         * @param {boolean} [liite] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidDokumenttiGet(oid: string, versio?: string, liite?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.aineistopalveluApiV1AineistoOidDokumenttiGet(oid, versio, liite, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poistaa aineistosta siinä olevan linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete(oid: string, kohdeOid: string, options?: any): AxiosPromise<AineistoAineisto> {
            return localVarFp.aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete(oid, kohdeOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lisää aineistoon linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1AineistoOidLinkitKohdeOidPost(oid: string, kohdeOid: string, options?: any): AxiosPromise<AineistoAineisto> {
            return localVarFp.aineistopalveluApiV1AineistoOidLinkitKohdeOidPost(oid, kohdeOid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DokumenttiApi - object-oriented interface
 * @export
 * @class DokumenttiApi
 * @extends {BaseAPI}
 */
export class DokumenttiApi extends BaseAPI {
    /**
     * 
     * @summary Palauttaa uuden dokumentin lähettämiseen tarvittavan upload-sivun rungon.
     * @param {string} oid 
     * @param {string} tiedosto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumenttiApi
     */
    public aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet(oid: string, tiedosto: string, options?: AxiosRequestConfig) {
        return DokumenttiApiFp(this.configuration).aineistopalveluApiV1AineistoOidDokumentinLahetyssivuTiedostoGet(oid, tiedosto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa olemassaolevan dokumentin sisällön päivittämiseen tarvittavat tiedot (S3 upload form).                   Valinnaiset dokumenttikohtaiset metatiedot annetaan query-parametreinä (?kuvaus=foobar&...), ks. /dokumentin-metatietokuvaus.                   Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle, ja ladattavan tiedoston                   nimen tulee vastata tälle kutsulle annettua parametria.                   Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
     * @param {string} oid 
     * @param {string} tiedosto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumenttiApi
     */
    public aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet(oid: string, tiedosto: string, options?: AxiosRequestConfig) {
        return DokumenttiApiFp(this.configuration).aineistopalveluApiV1AineistoOidDokumentinLahetystiedotTiedostoGet(oid, tiedosto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tekee redirectin annetun aineiston annettuun dokumenttiin (ja tarvittaessa tiettyyn versioon)
     * @param {string} oid 
     * @param {string} [versio] 
     * @param {boolean} [liite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumenttiApi
     */
    public aineistopalveluApiV1AineistoOidDokumenttiGet(oid: string, versio?: string, liite?: boolean, options?: AxiosRequestConfig) {
        return DokumenttiApiFp(this.configuration).aineistopalveluApiV1AineistoOidDokumenttiGet(oid, versio, liite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poistaa aineistosta siinä olevan linkin annettuun kohteeseen.
     * @param {string} oid 
     * @param {string} kohdeOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumenttiApi
     */
    public aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete(oid: string, kohdeOid: string, options?: AxiosRequestConfig) {
        return DokumenttiApiFp(this.configuration).aineistopalveluApiV1AineistoOidLinkitKohdeOidDelete(oid, kohdeOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lisää aineistoon linkin annettuun kohteeseen.
     * @param {string} oid 
     * @param {string} kohdeOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumenttiApi
     */
    public aineistopalveluApiV1AineistoOidLinkitKohdeOidPost(oid: string, kohdeOid: string, options?: AxiosRequestConfig) {
        return DokumenttiApiFp(this.configuration).aineistopalveluApiV1AineistoOidLinkitKohdeOidPost(oid, kohdeOid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KohdeApi - axios parameter creator
 * @export
 */
export const KohdeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Palauttaa OID:n mukaisen kohdeluokan instanssin (aineiston tai viittauksen).
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohdeOidGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1KohdeOidGet', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/kohde/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa pakatun kansion lähettämiseen tarvittavat tiedot (S3 upload form).                         Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle,                         ja ladattavan tiedoston nimen tulee vastata tälle kutsulle annettua parametria.                         Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet: async (oid: string, tiedosto: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet', 'oid', oid)
            // verify required parameter 'tiedosto' is not null or undefined
            assertParamExists('aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet', 'tiedosto', tiedosto)
            const localVarPath = `/aineistopalvelu/api/v1/kohde/{oid}/kansion-lahetystiedot/{tiedosto}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"tiedosto"}}`, encodeURIComponent(String(tiedosto)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa annettuun kohteeseen liittyvät käynnissä olevat tai hiljattain                         valmistuneet/keskeytyneet massaoperaatiot (paketin purku tms.)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/kohde/{oid}/kaynnissa-olevat-operaatiot`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa annetut aineistot
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohteetPost: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aineistopalveluApiV1KohteetPost', 'body', body)
            const localVarPath = `/aineistopalvelu/api/v1/kohteet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet: async (nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nimiavaruus' is not null or undefined
            assertParamExists('aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet', 'nimiavaruus', nimiavaruus)
            // verify required parameter 'kohdeluokka' is not null or undefined
            assertParamExists('aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet', 'kohdeluokka', kohdeluokka)
            const localVarPath = `/aineistopalvelu/api/v1/tunnisteet/{nimiavaruus}/{kohdeluokka}`
                .replace(`{${"nimiavaruus"}}`, encodeURIComponent(String(nimiavaruus)))
                .replace(`{${"kohdeluokka"}}`, encodeURIComponent(String(kohdeluokka)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (alkumuokkausaika !== undefined) {
                localVarQueryParameter['alkumuokkausaika'] = (alkumuokkausaika as any instanceof Date) ?
                    (alkumuokkausaika as any).toISOString() :
                    alkumuokkausaika;
            }

            if (loppumuokkausaika !== undefined) {
                localVarQueryParameter['loppumuokkausaika'] = (loppumuokkausaika as any instanceof Date) ?
                    (loppumuokkausaika as any).toISOString() :
                    loppumuokkausaika;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden poistetut tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet: async (nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nimiavaruus' is not null or undefined
            assertParamExists('aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet', 'nimiavaruus', nimiavaruus)
            // verify required parameter 'kohdeluokka' is not null or undefined
            assertParamExists('aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet', 'kohdeluokka', kohdeluokka)
            const localVarPath = `/aineistopalvelu/api/v1/tunnisteet/{nimiavaruus}/{kohdeluokka}/poistetut`
                .replace(`{${"nimiavaruus"}}`, encodeURIComponent(String(nimiavaruus)))
                .replace(`{${"kohdeluokka"}}`, encodeURIComponent(String(kohdeluokka)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (alkumuokkausaika !== undefined) {
                localVarQueryParameter['alkumuokkausaika'] = (alkumuokkausaika as any instanceof Date) ?
                    (alkumuokkausaika as any).toISOString() :
                    alkumuokkausaika;
            }

            if (loppumuokkausaika !== undefined) {
                localVarQueryParameter['loppumuokkausaika'] = (loppumuokkausaika as any instanceof Date) ?
                    (loppumuokkausaika as any).toISOString() :
                    loppumuokkausaika;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KohdeApi - functional programming interface
 * @export
 */
export const KohdeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KohdeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Palauttaa OID:n mukaisen kohdeluokan instanssin (aineiston tai viittauksen).
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1KohdeOidGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1KohdeOidGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa pakatun kansion lähettämiseen tarvittavat tiedot (S3 upload form).                         Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle,                         ja ladattavan tiedoston nimen tulee vastata tälle kutsulle annettua parametria.                         Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet(oid: string, tiedosto: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet(oid, tiedosto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa annettuun kohteeseen liittyvät käynnissä olevat tai hiljattain                         valmistuneet/keskeytyneet massaoperaatiot (paketin purku tms.)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: AineistoOperaatioOperaatiot; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa annetut aineistot
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1KohteetPost(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<AineistoAineistotInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1KohteetPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden poistetut tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KohdeApi - factory interface
 * @export
 */
export const KohdeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KohdeApiFp(configuration)
    return {
        /**
         * 
         * @summary Palauttaa OID:n mukaisen kohdeluokan instanssin (aineiston tai viittauksen).
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohdeOidGet(oid: string, options?: any): AxiosPromise<object> {
            return localVarFp.aineistopalveluApiV1KohdeOidGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa pakatun kansion lähettämiseen tarvittavat tiedot (S3 upload form).                         Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle,                         ja ladattavan tiedoston nimen tulee vastata tälle kutsulle annettua parametria.                         Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
         * @param {string} oid 
         * @param {string} tiedosto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet(oid: string, tiedosto: string, options?: any): AxiosPromise<void> {
            return localVarFp.aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet(oid, tiedosto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa annettuun kohteeseen liittyvät käynnissä olevat tai hiljattain                         valmistuneet/keskeytyneet massaoperaatiot (paketin purku tms.)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet(oid: string, options?: any): AxiosPromise<{ [key: string]: AineistoOperaatioOperaatiot; }> {
            return localVarFp.aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa annetut aineistot
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1KohteetPost(body: Array<string>, options?: any): AxiosPromise<Set<AineistoAineistotInner>> {
            return localVarFp.aineistopalveluApiV1KohteetPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: any): AxiosPromise<object> {
            return localVarFp.aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden poistetut tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: any): AxiosPromise<object> {
            return localVarFp.aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KohdeApi - object-oriented interface
 * @export
 * @class KohdeApi
 * @extends {BaseAPI}
 */
export class KohdeApi extends BaseAPI {
    /**
     * 
     * @summary Palauttaa OID:n mukaisen kohdeluokan instanssin (aineiston tai viittauksen).
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public aineistopalveluApiV1KohdeOidGet(oid: string, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).aineistopalveluApiV1KohdeOidGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa pakatun kansion lähettämiseen tarvittavat tiedot (S3 upload form).                         Formiin tulee lisätä viimeisenä file-niminen input-kenttä varsinaiselle tiedostolle,                         ja ladattavan tiedoston nimen tulee vastata tälle kutsulle annettua parametria.                         Generoidut parametrit ovat voimassa :voimassa-asti -avaimen mukaisen ajan.
     * @param {string} oid 
     * @param {string} tiedosto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet(oid: string, tiedosto: string, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).aineistopalveluApiV1KohdeOidKansionLahetystiedotTiedostoGet(oid, tiedosto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa annettuun kohteeseen liittyvät käynnissä olevat tai hiljattain                         valmistuneet/keskeytyneet massaoperaatiot (paketin purku tms.)
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet(oid: string, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).aineistopalveluApiV1KohdeOidKaynnissaOlevatOperaatiotGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa annetut aineistot
     * @param {Array<string>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public aineistopalveluApiV1KohteetPost(body: Array<string>, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).aineistopalveluApiV1KohteetPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
     * @param {string} nimiavaruus 
     * @param {string} kohdeluokka 
     * @param {string} [alkumuokkausaika] 
     * @param {string} [loppumuokkausaika] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa annetun kohdeluokan kohteiden poistetut tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
     * @param {string} nimiavaruus 
     * @param {string} kohdeluokka 
     * @param {string} [alkumuokkausaika] 
     * @param {string} [loppumuokkausaika] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).aineistopalveluApiV1TunnisteetNimiavaruusKohdeluokkaPoistetutGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LatauspakettiApi - axios parameter creator
 * @export
 */
export const LatauspakettiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Tekee redirectin annetun latauspaketin dokumenttiin
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1LatauspakettiOidGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1LatauspakettiOidGet', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/latauspaketti/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Aloittaa parametrina annettujen aineistojen pakkaamisen ZIP-paketiksi.                           Palauttaa tunnisteen, jolla voidaan kysyä tilatiedot sekä ladata lopulta paketti, kun sen luonti on valmistunut.
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1LatauspakettiPost: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aineistopalveluApiV1LatauspakettiPost', 'body', body)
            const localVarPath = `/aineistopalvelu/api/v1/latauspaketti`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LatauspakettiApi - functional programming interface
 * @export
 */
export const LatauspakettiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LatauspakettiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Tekee redirectin annetun latauspaketin dokumenttiin
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1LatauspakettiOidGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1LatauspakettiOidGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Aloittaa parametrina annettujen aineistojen pakkaamisen ZIP-paketiksi.                           Palauttaa tunnisteen, jolla voidaan kysyä tilatiedot sekä ladata lopulta paketti, kun sen luonti on valmistunut.
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1LatauspakettiPost(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistopalveluApiV1LatauspakettiPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1LatauspakettiPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LatauspakettiApi - factory interface
 * @export
 */
export const LatauspakettiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LatauspakettiApiFp(configuration)
    return {
        /**
         * 
         * @summary Tekee redirectin annetun latauspaketin dokumenttiin
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1LatauspakettiOidGet(oid: string, options?: any): AxiosPromise<void> {
            return localVarFp.aineistopalveluApiV1LatauspakettiOidGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Aloittaa parametrina annettujen aineistojen pakkaamisen ZIP-paketiksi.                           Palauttaa tunnisteen, jolla voidaan kysyä tilatiedot sekä ladata lopulta paketti, kun sen luonti on valmistunut.
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1LatauspakettiPost(body: Array<string>, options?: any): AxiosPromise<AineistopalveluApiV1LatauspakettiPost200Response> {
            return localVarFp.aineistopalveluApiV1LatauspakettiPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LatauspakettiApi - object-oriented interface
 * @export
 * @class LatauspakettiApi
 * @extends {BaseAPI}
 */
export class LatauspakettiApi extends BaseAPI {
    /**
     * 
     * @summary Tekee redirectin annetun latauspaketin dokumenttiin
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LatauspakettiApi
     */
    public aineistopalveluApiV1LatauspakettiOidGet(oid: string, options?: AxiosRequestConfig) {
        return LatauspakettiApiFp(this.configuration).aineistopalveluApiV1LatauspakettiOidGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Aloittaa parametrina annettujen aineistojen pakkaamisen ZIP-paketiksi.                           Palauttaa tunnisteen, jolla voidaan kysyä tilatiedot sekä ladata lopulta paketti, kun sen luonti on valmistunut.
     * @param {Array<string>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LatauspakettiApi
     */
    public aineistopalveluApiV1LatauspakettiPost(body: Array<string>, options?: AxiosRequestConfig) {
        return LatauspakettiApiFp(this.configuration).aineistopalveluApiV1LatauspakettiPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ViittausApi - axios parameter creator
 * @export
 */
export const ViittausApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listaa kaikki viittaukset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aineistopalvelu/api/v1/viittaus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poistaa viittauksen
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidDelete: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidDelete', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/viittaus/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa oid:llä määritellyn viittauksen tiedot.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidGet', 'oid', oid)
            const localVarPath = `/aineistopalvelu/api/v1/viittaus/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poistaa viittauksesta siinä olevan linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete: async (oid: string, kohdeOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete', 'oid', oid)
            // verify required parameter 'kohdeOid' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete', 'kohdeOid', kohdeOid)
            const localVarPath = `/aineistopalvelu/api/v1/viittaus/{oid}/linkit/{kohde-oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"kohde-oid"}}`, encodeURIComponent(String(kohdeOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lisää viittaukselle linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidLinkitKohdeOidPost: async (oid: string, kohdeOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidLinkitKohdeOidPost', 'oid', oid)
            // verify required parameter 'kohdeOid' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidLinkitKohdeOidPost', 'kohdeOid', kohdeOid)
            const localVarPath = `/aineistopalvelu/api/v1/viittaus/{oid}/linkit/{kohde-oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"kohde-oid"}}`, encodeURIComponent(String(kohdeOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Päivittää viittauksen metatiedot.                       Palauttaa viittauksen (kaikki) tiedot.
         * @param {string} oid 
         * @param {ViittausPaivitystiedot} viittausPaivitystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidPut: async (oid: string, viittausPaivitystiedot: ViittausPaivitystiedot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidPut', 'oid', oid)
            // verify required parameter 'viittausPaivitystiedot' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausOidPut', 'viittausPaivitystiedot', viittausPaivitystiedot)
            const localVarPath = `/aineistopalvelu/api/v1/viittaus/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viittausPaivitystiedot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Luo uuden viittauksen annetuilla metatiedoilla.                        Palauttaa viittauksen (kaikki) tiedot sisältäen sille generoidun OIDin.                        HUOM! Anna vain toinen sijainneista
         * @param {ViittausLisaystiedot} viittausLisaystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausPost: async (viittausLisaystiedot: ViittausLisaystiedot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'viittausLisaystiedot' is not null or undefined
            assertParamExists('aineistopalveluApiV1ViittausPost', 'viittausLisaystiedot', viittausLisaystiedot)
            const localVarPath = `/aineistopalvelu/api/v1/viittaus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viittausLisaystiedot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViittausApi - functional programming interface
 * @export
 */
export const ViittausApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViittausApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listaa kaikki viittaukset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1ViittausGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1ViittausGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poistaa viittauksen
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1ViittausOidDelete(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1ViittausOidDelete(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa oid:llä määritellyn viittauksen tiedot.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1ViittausOidGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoViittaus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1ViittausOidGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poistaa viittauksesta siinä olevan linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete(oid: string, kohdeOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoViittaus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete(oid, kohdeOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lisää viittaukselle linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1ViittausOidLinkitKohdeOidPost(oid: string, kohdeOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoViittaus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1ViittausOidLinkitKohdeOidPost(oid, kohdeOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Päivittää viittauksen metatiedot.                       Palauttaa viittauksen (kaikki) tiedot.
         * @param {string} oid 
         * @param {ViittausPaivitystiedot} viittausPaivitystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1ViittausOidPut(oid: string, viittausPaivitystiedot: ViittausPaivitystiedot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoViittaus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1ViittausOidPut(oid, viittausPaivitystiedot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Luo uuden viittauksen annetuilla metatiedoilla.                        Palauttaa viittauksen (kaikki) tiedot sisältäen sille generoidun OIDin.                        HUOM! Anna vain toinen sijainneista
         * @param {ViittausLisaystiedot} viittausLisaystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aineistopalveluApiV1ViittausPost(viittausLisaystiedot: ViittausLisaystiedot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AineistoViittaus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aineistopalveluApiV1ViittausPost(viittausLisaystiedot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ViittausApi - factory interface
 * @export
 */
export const ViittausApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViittausApiFp(configuration)
    return {
        /**
         * 
         * @summary Listaa kaikki viittaukset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.aineistopalveluApiV1ViittausGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poistaa viittauksen
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidDelete(oid: string, options?: any): AxiosPromise<void> {
            return localVarFp.aineistopalveluApiV1ViittausOidDelete(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa oid:llä määritellyn viittauksen tiedot.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidGet(oid: string, options?: any): AxiosPromise<AineistoViittaus> {
            return localVarFp.aineistopalveluApiV1ViittausOidGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poistaa viittauksesta siinä olevan linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete(oid: string, kohdeOid: string, options?: any): AxiosPromise<AineistoViittaus> {
            return localVarFp.aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete(oid, kohdeOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lisää viittaukselle linkin annettuun kohteeseen.
         * @param {string} oid 
         * @param {string} kohdeOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidLinkitKohdeOidPost(oid: string, kohdeOid: string, options?: any): AxiosPromise<AineistoViittaus> {
            return localVarFp.aineistopalveluApiV1ViittausOidLinkitKohdeOidPost(oid, kohdeOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Päivittää viittauksen metatiedot.                       Palauttaa viittauksen (kaikki) tiedot.
         * @param {string} oid 
         * @param {ViittausPaivitystiedot} viittausPaivitystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausOidPut(oid: string, viittausPaivitystiedot: ViittausPaivitystiedot, options?: any): AxiosPromise<AineistoViittaus> {
            return localVarFp.aineistopalveluApiV1ViittausOidPut(oid, viittausPaivitystiedot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Luo uuden viittauksen annetuilla metatiedoilla.                        Palauttaa viittauksen (kaikki) tiedot sisältäen sille generoidun OIDin.                        HUOM! Anna vain toinen sijainneista
         * @param {ViittausLisaystiedot} viittausLisaystiedot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aineistopalveluApiV1ViittausPost(viittausLisaystiedot: ViittausLisaystiedot, options?: any): AxiosPromise<AineistoViittaus> {
            return localVarFp.aineistopalveluApiV1ViittausPost(viittausLisaystiedot, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViittausApi - object-oriented interface
 * @export
 * @class ViittausApi
 * @extends {BaseAPI}
 */
export class ViittausApi extends BaseAPI {
    /**
     * 
     * @summary Listaa kaikki viittaukset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViittausApi
     */
    public aineistopalveluApiV1ViittausGet(options?: AxiosRequestConfig) {
        return ViittausApiFp(this.configuration).aineistopalveluApiV1ViittausGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poistaa viittauksen
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViittausApi
     */
    public aineistopalveluApiV1ViittausOidDelete(oid: string, options?: AxiosRequestConfig) {
        return ViittausApiFp(this.configuration).aineistopalveluApiV1ViittausOidDelete(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa oid:llä määritellyn viittauksen tiedot.
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViittausApi
     */
    public aineistopalveluApiV1ViittausOidGet(oid: string, options?: AxiosRequestConfig) {
        return ViittausApiFp(this.configuration).aineistopalveluApiV1ViittausOidGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poistaa viittauksesta siinä olevan linkin annettuun kohteeseen.
     * @param {string} oid 
     * @param {string} kohdeOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViittausApi
     */
    public aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete(oid: string, kohdeOid: string, options?: AxiosRequestConfig) {
        return ViittausApiFp(this.configuration).aineistopalveluApiV1ViittausOidLinkitKohdeOidDelete(oid, kohdeOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lisää viittaukselle linkin annettuun kohteeseen.
     * @param {string} oid 
     * @param {string} kohdeOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViittausApi
     */
    public aineistopalveluApiV1ViittausOidLinkitKohdeOidPost(oid: string, kohdeOid: string, options?: AxiosRequestConfig) {
        return ViittausApiFp(this.configuration).aineistopalveluApiV1ViittausOidLinkitKohdeOidPost(oid, kohdeOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Päivittää viittauksen metatiedot.                       Palauttaa viittauksen (kaikki) tiedot.
     * @param {string} oid 
     * @param {ViittausPaivitystiedot} viittausPaivitystiedot 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViittausApi
     */
    public aineistopalveluApiV1ViittausOidPut(oid: string, viittausPaivitystiedot: ViittausPaivitystiedot, options?: AxiosRequestConfig) {
        return ViittausApiFp(this.configuration).aineistopalveluApiV1ViittausOidPut(oid, viittausPaivitystiedot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Luo uuden viittauksen annetuilla metatiedoilla.                        Palauttaa viittauksen (kaikki) tiedot sisältäen sille generoidun OIDin.                        HUOM! Anna vain toinen sijainneista
     * @param {ViittausLisaystiedot} viittausLisaystiedot 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViittausApi
     */
    public aineistopalveluApiV1ViittausPost(viittausLisaystiedot: ViittausLisaystiedot, options?: AxiosRequestConfig) {
        return ViittausApiFp(this.configuration).aineistopalveluApiV1ViittausPost(viittausLisaystiedot, options).then((request) => request(this.axios, this.basePath));
    }
}


