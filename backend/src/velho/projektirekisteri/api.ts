/* tslint:disable */
/* eslint-disable */
/**
 * Projektirekisteri API v2
 * Projektirekisteri API v2  Palvelu vastaa seuraavista kohdeluokista:  - Projekti (tekninen nimi: projekti/projekti, oid-prefix: 1.2.246.578.5.1)  - Projektijoukko (tekninen nimi: projekti/projektijoukko, oid-prefix: 1.2.246.578.5.3)  - Toimeksianto (tekninen nimi: projekti/toimeksianto, oid-prefix: 1.2.246.578.5.2)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ProjektiProjekti
 */
export interface ProjektiProjekti {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'muokattu': string | null;
    /**
     * 
     * @type {ProjektiProjektiMitattugeometria}
     * @memberof ProjektiProjekti
     */
    'mitattugeometria'?: ProjektiProjektiMitattugeometria;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjekti
     */
    'tarkka-geometria'?: object;
    /**
     * 
     * @type {Array<ProjektiProjektiSijainnitInner>}
     * @memberof ProjektiProjekti
     */
    'sijainnit': Array<ProjektiProjektiSijainnitInner>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'tarkka-geometria-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjekti
     */
    'lahdejarjestelma': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'keskipiste-oid'?: string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjekti
     */
    'paattyen': object | null;
    /**
     * 
     * @type {ProjektiProjektiGeometrycollection}
     * @memberof ProjektiProjekti
     */
    'geometrycollection'?: ProjektiProjektiGeometrycollection | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudet}
     * @memberof ProjektiProjekti
     */
    'ominaisuudet': ProjektiProjektiLuontiOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'oid': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'projektijoukko': string | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiProjekti
     */
    'luoja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjekti
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjekti
     */
    'alkaen': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'vektorid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiProjekti
     */
    'muokkaaja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'mitattugeometria-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjekti
     */
    'sijainti-tilannepaiva'?: object;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiPiirretytGeometriatInner>}
     * @memberof ProjektiProjekti
     */
    'piirretyt-geometriat'?: Array<ProjektiProjektiLuontiPiirretytGeometriatInner>;
    /**
     * 
     * @type {Set<ProjektiProjektiProjektilinkitInner>}
     * @memberof ProjektiProjekti
     */
    'projektilinkit': Set<ProjektiProjektiProjektilinkitInner> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'luotu': string;
    /**
     * 
     * @type {ProjektiProjektiKeskipiste}
     * @memberof ProjektiProjekti
     */
    'keskipiste'?: ProjektiProjektiKeskipiste;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjektiProjekti
     */
    'piirretyt-geometriat-oidit'?: Array<string>;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiRataosoitteetInner>}
     * @memberof ProjektiProjekti
     */
    'rataosoitteet'?: Array<ProjektiProjektiLuontiRataosoitteetInner>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjekti
     */
    'lahdejarjestelman-id': string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiGeometrycollection
 */
export interface ProjektiProjektiGeometrycollection {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiGeometrycollection
     */
    'type': ProjektiProjektiGeometrycollectionTypeEnum;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiMitattugeometriaGeometria>}
     * @memberof ProjektiProjektiGeometrycollection
     */
    'geometries': Array<ProjektiProjektiLuontiMitattugeometriaGeometria>;
}

export const ProjektiProjektiGeometrycollectionTypeEnum = {
    GeometryCollection: 'GeometryCollection'
} as const;

export type ProjektiProjektiGeometrycollectionTypeEnum = typeof ProjektiProjektiGeometrycollectionTypeEnum[keyof typeof ProjektiProjektiGeometrycollectionTypeEnum];

/**
 * 
 * @export
 * @interface ProjektiProjektiKeskipiste
 */
export interface ProjektiProjektiKeskipiste {
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiKeskipiste
     */
    'geometria': ProjektiProjektiLuontiMitattugeometriaGeometria;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiKeskipiste
     */
    'luotu': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiKeskipiste
     */
    'oid': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiKeskipiste
     */
    'muokattu': string | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiKeskipiste
     */
    'geometria-wgs84'?: ProjektiProjektiLuontiMitattugeometriaGeometria;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuonti
 */
export interface ProjektiProjektiLuonti {
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometria}
     * @memberof ProjektiProjektiLuonti
     */
    'mitattugeometria'?: ProjektiProjektiLuontiMitattugeometria;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiSijainnitInner>}
     * @memberof ProjektiProjektiLuonti
     */
    'sijainnit': Array<ProjektiProjektiLuontiSijainnitInner>;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuonti
     */
    'lahdejarjestelma': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuonti
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuonti
     */
    'paattyen': object | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudet}
     * @memberof ProjektiProjektiLuonti
     */
    'ominaisuudet': ProjektiProjektiLuontiOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuonti
     */
    'projektijoukko': string | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuonti
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuonti
     */
    'alkaen': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuonti
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuonti
     */
    'sijainti-tilannepaiva'?: object;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiPiirretytGeometriatInner>}
     * @memberof ProjektiProjektiLuonti
     */
    'piirretyt-geometriat'?: Array<ProjektiProjektiLuontiPiirretytGeometriatInner>;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiRataosoitteetInner>}
     * @memberof ProjektiProjektiLuonti
     */
    'rataosoitteet'?: Array<ProjektiProjektiLuontiRataosoitteetInner>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuonti
     */
    'lahdejarjestelman-id': string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiMitattugeometria
 */
export interface ProjektiProjektiLuontiMitattugeometria {
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiLuontiMitattugeometria
     */
    'geometria': ProjektiProjektiLuontiMitattugeometriaGeometria;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiMitattugeometriaGeometria
 */
export interface ProjektiProjektiLuontiMitattugeometriaGeometria {
    /**
     * 
     * @type {Array<object>}
     * @memberof ProjektiProjektiLuontiMitattugeometriaGeometria
     */
    'coordinates': Array<object>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiMitattugeometriaGeometria
     */
    'type': ProjektiProjektiLuontiMitattugeometriaGeometriaTypeEnum;
}

export const ProjektiProjektiLuontiMitattugeometriaGeometriaTypeEnum = {
    Point: 'Point',
    MultiPolygon: 'MultiPolygon',
    MultiLineString: 'MultiLineString',
    MultiPoint: 'MultiPoint',
    LineString: 'LineString',
    Polygon: 'Polygon'
} as const;

export type ProjektiProjektiLuontiMitattugeometriaGeometriaTypeEnum = typeof ProjektiProjektiLuontiMitattugeometriaGeometriaTypeEnum[keyof typeof ProjektiProjektiLuontiMitattugeometriaGeometriaTypeEnum];

/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudet
 */
export interface ProjektiProjektiLuontiOminaisuudet {
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'kustannusjakoehdotus'?: ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'toteuttava-organisaatio'?: object | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'lunastuskustannukset'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'valitukset'?: number | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'liikenteeseenluovutus'?: ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetVarahenkilo}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'varahenkilo': ProjektiProjektiLuontiOminaisuudetVarahenkilo | null;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiOminaisuudetLiittyvatHenkilotInner>}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'liittyvat-henkilot'?: Array<ProjektiProjektiLuontiOminaisuudetLiittyvatHenkilotInner>;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'ennakkoneuvottelu'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'muu-liittyva-organisaatio'?: string | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetLainvoimaisuus}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'lainvoimaisuus'?: ProjektiProjektiLuontiOminaisuudetLainvoimaisuus | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'asiatunnus-traficom'?: string | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'korkein-hallinto-oikeus'?: ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'kuvaus': string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'hallinnollisen-kasittelyn-tila'?: object | null;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'vaylamuoto': Set<ProjektiProjektiLuontiOminaisuudetVaylamuotoEnum>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'kunta': Set<object> | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'luokka'?: object | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'kiireellinen-kasittely-pyydetty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'sisaltaa-maantien-lakkauttamisen'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'arvioitu-toteutusajankohta'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'tila': object;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'toteutusilmoitus'?: ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetYmparisto}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'ymparisto'?: ProjektiProjektiLuontiOminaisuudetYmparisto;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'vesivaylanumerot': Set<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'vls-linkki'?: string | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetVastuuhenkilo}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'vastuuhenkilo': ProjektiProjektiLuontiOminaisuudetVastuuhenkilo;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'asiatunnus-ely'?: string | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetKustannusarvio}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'kustannusarvio': ProjektiProjektiLuontiOminaisuudetKustannusarvio;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'maakunta': Set<object> | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'suunnittelun-toteutunut-kustannus': number | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetLainvoimaisuus}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'nahtavilla-olo'?: ProjektiProjektiLuontiOminaisuudetLainvoimaisuus | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'paattyy': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'muu-kunta'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'ohjelma'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'tilaajaorganisaatio': object;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'muistutukset'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'nimi': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'muu-maakunta'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'muu-tilaajaorganisaatio'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'rauennut'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'lisatiedot'?: string | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'hyvaksymispaatos'?: ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos;
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'sisaltaa-toisen-vaylamuodon-suunnittelua'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'tie-ratasuunnitelma-luotu'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'kustannustietojen-kuvaus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'muu-toteuttava-organisaatio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'ten-t'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'yva-hanke'?: boolean;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetSuunnittelupaatos}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'suunnittelupaatos'?: ProjektiProjektiLuontiOminaisuudetSuunnittelupaatos;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'hankekortti': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'asiatunnus-vaylavirasto'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'aloituskuulutus'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'rahoituksen-lahde': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'alkaa': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'linkki': string | null;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'kohteet'?: Set<object> | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'koordinaattijarjestelma'?: object | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'hallinto-oikeus'?: ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'vaylatoimitus-kaynnistynyt'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'paavaylaverkko'?: object | null;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'liittyva-organisaatio': Set<object> | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'vaihe': object;
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'suunnittelusopimus'?: boolean;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetHyvaksymisesitys}
     * @memberof ProjektiProjektiLuontiOminaisuudet
     */
    'hyvaksymisesitys'?: ProjektiProjektiLuontiOminaisuudetHyvaksymisesitys | null;
}

export const ProjektiProjektiLuontiOminaisuudetVaylamuotoEnum = {
    Vesi: 'vesi',
    Tie: 'tie',
    Rata: 'rata'
} as const;

export type ProjektiProjektiLuontiOminaisuudetVaylamuotoEnum = typeof ProjektiProjektiLuontiOminaisuudetVaylamuotoEnum[keyof typeof ProjektiProjektiLuontiOminaisuudetVaylamuotoEnum];

/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetHyvaksymisesitys
 */
export interface ProjektiProjektiLuontiOminaisuudetHyvaksymisesitys {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymisesitys
     */
    'lahetetty': object;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymisesitys
     */
    'saapunut': object | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos
 */
export interface ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos {
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosJatkopaatos}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos
     */
    'jatkopaatos': ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosJatkopaatos | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos
     */
    'annettu': object | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosOsapaatos}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos
     */
    'osapaatos': ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosOsapaatos | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos
     */
    'palautettu-laatijalle': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatos
     */
    'jatkopaatoksen-asiatunnus'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosJatkopaatos
 */
export interface ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosJatkopaatos {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosJatkopaatos
     */
    'toinen-annettu': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosJatkopaatos
     */
    'ensimmainen-annettu': object;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosOsapaatos
 */
export interface ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosOsapaatos {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetHyvaksymispaatosOsapaatos
     */
    'annettu': object;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus
 */
export interface ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus {
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus
     */
    'hyvaksymispaatos-kumottu': boolean;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos}
     * @memberof ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus
     */
    'paatos': ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos}
     * @memberof ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeus
     */
    'valipaatos': ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos
 */
export interface ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos
     */
    'annettu': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetKorkeinHallintoOikeusPaatos
     */
    'sisalto': string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetKustannusarvio
 */
export interface ProjektiProjektiLuontiOminaisuudetKustannusarvio {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusarvio
     */
    'alkuperainen-maku-indeksi': string | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusarvio
     */
    'tilaajatehtavat'?: number | null;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiOminaisuudetKustannusarvioKustannusarviovaihtoehdotInner>}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusarvio
     */
    'kustannusarviovaihtoehdot'?: Array<ProjektiProjektiLuontiOminaisuudetKustannusarvioKustannusarviovaihtoehdotInner>;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusarvio
     */
    'tyomaatehtavat'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusarvio
     */
    'rakennusosat'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusarvio
     */
    'ajanhetken-mukainen-maku-indeksi'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetKustannusarvioKustannusarviovaihtoehdotInner
 */
export interface ProjektiProjektiLuontiOminaisuudetKustannusarvioKustannusarviovaihtoehdotInner {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusarvioKustannusarviovaihtoehdotInner
     */
    'kustannusarvio': number | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
 */
export interface ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
     */
    'vesihuoltoverkot': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
     */
    'kunta': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
     */
    'viestintaverkot': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
     */
    'sahkoverkot': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
     */
    'liikenteenohjausyhtio': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
     */
    'muut': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetKustannusjakoehdotus
     */
    'valtionosuus': number | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetLainvoimaisuus
 */
export interface ProjektiProjektiLuontiOminaisuudetLainvoimaisuus {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetLainvoimaisuus
     */
    'paattyen': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetLainvoimaisuus
     */
    'alkaen': object;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus
 */
export interface ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus
     */
    'kokonaan': object | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProjektiProjektiLuontiOminaisuudetLiikenteeseenluovutus
     */
    'osittain': Array<object> | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetLiittyvatHenkilotInner
 */
export interface ProjektiProjektiLuontiOminaisuudetLiittyvatHenkilotInner {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetLiittyvatHenkilotInner
     */
    'sahkoposti': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetLiittyvatHenkilotInner
     */
    'rooli': string;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetSuunnittelupaatos
 */
export interface ProjektiProjektiLuontiOminaisuudetSuunnittelupaatos {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiOminaisuudetSuunnittelupaatos
     */
    'paivamaara': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetSuunnittelupaatos
     */
    'linkki': string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetVarahenkilo
 */
export interface ProjektiProjektiLuontiOminaisuudetVarahenkilo {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetVarahenkilo
     */
    'sahkoposti': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetVarahenkilo
     */
    'nimi': string;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetVastuuhenkilo
 */
export interface ProjektiProjektiLuontiOminaisuudetVastuuhenkilo {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetVastuuhenkilo
     */
    'sahkoposti': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiOminaisuudetVastuuhenkilo
     */
    'nimi': string;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiOminaisuudetYmparisto
 */
export interface ProjektiProjektiLuontiOminaisuudetYmparisto {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetYmparisto
     */
    'kokonaispaastot-kayton-aikana': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiOminaisuudetYmparisto
     */
    'kokonaispaastot-ennen-kayttoa': number | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiPiirretytGeometriatInner
 */
export interface ProjektiProjektiLuontiPiirretytGeometriatInner {
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiLuontiPiirretytGeometriatInner
     */
    'geometria': ProjektiProjektiLuontiMitattugeometriaGeometria;
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiLuontiPiirretytGeometriatInner
     */
    'geometria-wgs84'?: ProjektiProjektiLuontiMitattugeometriaGeometria;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiPiirretytGeometriatInner
     */
    'luotu'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiPiirretytGeometriatInner
     */
    'oid'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiPiirretytGeometriatInner
     */
    'muokattu'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiRataosoitteetInner
 */
export interface ProjektiProjektiLuontiRataosoitteetInner {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'alku-km': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'loppu-m': number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'ratanumero': string;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'loppu-km': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'alku-m': number;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'geometria-oid'?: string;
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'geometria-wgs84'?: ProjektiProjektiLuontiMitattugeometriaGeometria;
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiLuontiRataosoitteetInner
     */
    'geometria'?: ProjektiProjektiLuontiMitattugeometriaGeometria;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiSijainnitInner
 */
export interface ProjektiProjektiLuontiSijainnitInner {
    /**
     * 
     * @type {ProjektiProjektiLuontiSijainnitInnerAlkusijainti}
     * @memberof ProjektiProjektiLuontiSijainnitInner
     */
    'alkusijainti': ProjektiProjektiLuontiSijainnitInnerAlkusijainti;
    /**
     * 
     * @type {ProjektiProjektiLuontiSijainnitInnerAlkusijainti}
     * @memberof ProjektiProjektiLuontiSijainnitInner
     */
    'loppusijainti': ProjektiProjektiLuontiSijainnitInnerAlkusijainti;
    /**
     * 
     * @type {ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne}
     * @memberof ProjektiProjektiLuontiSijainnitInner
     */
    'sijaintitarkenne'?: ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiSijainnitInnerAlkusijainti
 */
export interface ProjektiProjektiLuontiSijainnitInnerAlkusijainti {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiSijainnitInnerAlkusijainti
     */
    'tie': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiSijainnitInnerAlkusijainti
     */
    'osa': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiLuontiSijainnitInnerAlkusijainti
     */
    'etaisyys': number;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
 */
export interface ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne {
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'puoli'?: object;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'reuna-alueet'?: Set<object>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'luiskat'?: Set<object>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'ajoradat'?: Set<object>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'ojan-pohjat'?: Set<object>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'erotusalueet'?: Set<object>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'pientareet'?: Set<object>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'tasanteet'?: Set<object>;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne
     */
    'kaistat'?: Set<object>;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiMitattugeometria
 */
export interface ProjektiProjektiMitattugeometria {
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiMitattugeometria
     */
    'geometria': ProjektiProjektiLuontiMitattugeometriaGeometria;
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiMitattugeometria
     */
    'geometria-wgs84'?: ProjektiProjektiLuontiMitattugeometriaGeometria;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiMuokkaus
 */
export interface ProjektiProjektiMuokkaus {
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometria}
     * @memberof ProjektiProjektiMuokkaus
     */
    'mitattugeometria'?: ProjektiProjektiLuontiMitattugeometria;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiMuokkaus
     */
    'tarkka-geometria'?: object;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiSijainnitInner>}
     * @memberof ProjektiProjektiMuokkaus
     */
    'sijainnit': Array<ProjektiProjektiLuontiSijainnitInner>;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiMuokkaus
     */
    'lahdejarjestelma': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiMuokkaus
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiMuokkaus
     */
    'paattyen': object | null;
    /**
     * 
     * @type {ProjektiProjektiLuontiOminaisuudet}
     * @memberof ProjektiProjektiMuokkaus
     */
    'ominaisuudet': ProjektiProjektiLuontiOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiMuokkaus
     */
    'oid': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiMuokkaus
     */
    'projektijoukko': string | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiMuokkaus
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiMuokkaus
     */
    'alkaen': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiMuokkaus
     */
    'mitattugeometria-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiMuokkaus
     */
    'sijainti-tilannepaiva'?: object;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiPiirretytGeometriatInner>}
     * @memberof ProjektiProjektiMuokkaus
     */
    'piirretyt-geometriat'?: Array<ProjektiProjektiLuontiPiirretytGeometriatInner>;
    /**
     * 
     * @type {Array<ProjektiProjektiLuontiRataosoitteetInner>}
     * @memberof ProjektiProjektiMuokkaus
     */
    'rataosoitteet'?: Array<ProjektiProjektiLuontiRataosoitteetInner>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiMuokkaus
     */
    'lahdejarjestelman-id': string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiProjektilinkitInner
 */
export interface ProjektiProjektiProjektilinkitInner {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiProjektilinkitInner
     */
    'kohde': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiProjektilinkitInner
     */
    'lahde': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektiProjektilinkitInner
     */
    'tyyppi': object;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiSijainnitInner
 */
export interface ProjektiProjektiSijainnitInner {
    /**
     * 
     * @type {ProjektiProjektiSijainnitInnerAlkusijainti}
     * @memberof ProjektiProjektiSijainnitInner
     */
    'alkusijainti': ProjektiProjektiSijainnitInnerAlkusijainti;
    /**
     * 
     * @type {ProjektiProjektiSijainnitInnerAlkusijainti}
     * @memberof ProjektiProjektiSijainnitInner
     */
    'loppusijainti': ProjektiProjektiSijainnitInnerAlkusijainti;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektiSijainnitInner
     */
    'sijainti-oid': string;
    /**
     * 
     * @type {ProjektiProjektiLuontiMitattugeometriaGeometria}
     * @memberof ProjektiProjektiSijainnitInner
     */
    'keskilinjageometria'?: ProjektiProjektiLuontiMitattugeometriaGeometria;
    /**
     * 
     * @type {ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne}
     * @memberof ProjektiProjektiSijainnitInner
     */
    'sijaintitarkenne'?: ProjektiProjektiLuontiSijainnitInnerSijaintitarkenne;
}
/**
 * 
 * @export
 * @interface ProjektiProjektiSijainnitInnerAlkusijainti
 */
export interface ProjektiProjektiSijainnitInnerAlkusijainti {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiSijainnitInnerAlkusijainti
     */
    'tie': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiSijainnitInnerAlkusijainti
     */
    'osa': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiSijainnitInnerAlkusijainti
     */
    'etaisyys': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektiSijainnitInnerAlkusijainti
     */
    'enkoodattu'?: number;
}
/**
 * 
 * @export
 * @interface ProjektiProjektijoukko
 */
export interface ProjektiProjektijoukko {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukko
     */
    'muokattu': string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukko
     */
    'lahdejarjestelma': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukko
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukko
     */
    'paattyen': object | null;
    /**
     * 
     * @type {ProjektiProjektijoukkoOminaisuudet}
     * @memberof ProjektiProjektijoukko
     */
    'ominaisuudet': ProjektiProjektijoukkoOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukko
     */
    'oid': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukko
     */
    'laskennallinen-keskipiste': object;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiProjektijoukko
     */
    'luoja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukko
     */
    'geometry': object;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukko
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukko
     */
    'alkaen': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukko
     */
    'karttapiste': object;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukko
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiProjektijoukko
     */
    'muokkaaja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukko
     */
    'luotu': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukko
     */
    'lahdejarjestelman-id': string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektijoukkoOminaisuudet
 */
export interface ProjektiProjektijoukkoOminaisuudet {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'h-k-suhde': number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'varahenkilo': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'muu-liittyva-organisaatio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'kuvaus': string | null;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'vaylamuoto': Set<ProjektiProjektijoukkoOminaisuudetVaylamuotoEnum>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'kunta': string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'tila'?: object;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'vastuuhenkilo': string;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'kustannusarvio': number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'maakunta': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'maku-indeksi': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'paattyy'?: string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'tilaajaorganisaatio': object;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'nimi': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'muu-tilaajaorganisaatio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'lyhenne': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'kustannustietojen-kuvaus'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'rahoituksen-lahde': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'alkaa'?: string;
    /**
     * 
     * @type {Set<object>}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'liittyva-organisaatio': Set<object> | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukkoOminaisuudet
     */
    'vaihe'?: object;
}

export const ProjektiProjektijoukkoOminaisuudetVaylamuotoEnum = {
    Vesi: 'vesi',
    Tie: 'tie',
    Rata: 'rata'
} as const;

export type ProjektiProjektijoukkoOminaisuudetVaylamuotoEnum = typeof ProjektiProjektijoukkoOminaisuudetVaylamuotoEnum[keyof typeof ProjektiProjektijoukkoOminaisuudetVaylamuotoEnum];

/**
 * 
 * @export
 * @interface ProjektiProjektijoukonLisays
 */
export interface ProjektiProjektijoukonLisays {
    /**
     * 
     * @type {ProjektiProjektijoukotInnerOminaisuudet}
     * @memberof ProjektiProjektijoukonLisays
     */
    'ominaisuudet': ProjektiProjektijoukotInnerOminaisuudet;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukonLisays
     */
    'karttapiste': object;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukonLisays
     */
    'geometry': object;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukonLisays
     */
    'schemaversio': number;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukonLisays
     */
    'muutoksen-lahde-oid'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektijoukonPaivitys
 */
export interface ProjektiProjektijoukonPaivitys {
    /**
     * 
     * @type {ProjektiProjektijoukotInnerOminaisuudet}
     * @memberof ProjektiProjektijoukonPaivitys
     */
    'ominaisuudet': ProjektiProjektijoukotInnerOminaisuudet;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukonPaivitys
     */
    'karttapiste': object;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukonPaivitys
     */
    'geometry': object;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukonPaivitys
     */
    'schemaversio': number;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukonPaivitys
     */
    'muutoksen-lahde-oid'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektijoukotInner
 */
export interface ProjektiProjektijoukotInner {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInner
     */
    'muokattu': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInner
     */
    'lahdejarjestelma': ProjektiProjektijoukotInnerLahdejarjestelmaEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInner
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukotInner
     */
    'paattyen': object | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerOminaisuudet}
     * @memberof ProjektiProjektijoukotInner
     */
    'ominaisuudet': ProjektiProjektijoukotInnerOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInner
     */
    'oid': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukotInner
     */
    'laskennallinen-keskipiste': object;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiProjektijoukotInner
     */
    'luoja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukotInner
     */
    'geometry': object;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukotInner
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukotInner
     */
    'alkaen': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiProjektijoukotInner
     */
    'karttapiste': object;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInner
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiProjektijoukotInner
     */
    'muokkaaja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInner
     */
    'luotu': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInner
     */
    'lahdejarjestelman-id': string | null;
}

export const ProjektiProjektijoukotInnerLahdejarjestelmaEnum = {
    Lj05: 'lahdejarjestelma/lj05',
    Lj13: 'lahdejarjestelma/lj13',
    Lj14: 'lahdejarjestelma/lj14',
    Lj03: 'lahdejarjestelma/lj03',
    Lj10: 'lahdejarjestelma/lj10',
    Lj04: 'lahdejarjestelma/lj04',
    Lj08: 'lahdejarjestelma/lj08',
    Lj11: 'lahdejarjestelma/lj11',
    Lj06: 'lahdejarjestelma/lj06',
    Lj02: 'lahdejarjestelma/lj02',
    Lj09: 'lahdejarjestelma/lj09',
    Lj07: 'lahdejarjestelma/lj07',
    Lj15: 'lahdejarjestelma/lj15',
    Lj18: 'lahdejarjestelma/lj18',
    Lj17: 'lahdejarjestelma/lj17',
    Lj20: 'lahdejarjestelma/lj20',
    Lj16: 'lahdejarjestelma/lj16',
    Lj01: 'lahdejarjestelma/lj01',
    Lj19: 'lahdejarjestelma/lj19',
    Lj12: 'lahdejarjestelma/lj12'
} as const;

export type ProjektiProjektijoukotInnerLahdejarjestelmaEnum = typeof ProjektiProjektijoukotInnerLahdejarjestelmaEnum[keyof typeof ProjektiProjektijoukotInnerLahdejarjestelmaEnum];

/**
 * 
 * @export
 * @interface ProjektiProjektijoukotInnerLuoja
 */
export interface ProjektiProjektijoukotInnerLuoja {
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerLuoja
     */
    'kayttajanimi': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProjektiProjektijoukotInnerLuoja
     */
    'api'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerLuoja
     */
    'client_id'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiProjektijoukotInnerOminaisuudet
 */
export interface ProjektiProjektijoukotInnerOminaisuudet {
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'h-k-suhde': number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'varahenkilo': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'muu-liittyva-organisaatio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'kuvaus': string | null;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'vaylamuoto': Set<ProjektiProjektijoukotInnerOminaisuudetVaylamuotoEnum>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'kunta': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'tila'?: ProjektiProjektijoukotInnerOminaisuudetTilaEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'vastuuhenkilo': string;
    /**
     * 
     * @type {number}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'kustannusarvio': number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'maakunta': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'maku-indeksi': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'paattyy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'tilaajaorganisaatio': ProjektiProjektijoukotInnerOminaisuudetTilaajaorganisaatioEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'nimi': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'muu-tilaajaorganisaatio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'lyhenne': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'kustannustietojen-kuvaus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'rahoituksen-lahde': ProjektiProjektijoukotInnerOminaisuudetRahoituksenLahdeEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'alkaa'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'liittyva-organisaatio': Set<ProjektiProjektijoukotInnerOminaisuudetLiittyvaOrganisaatioEnum>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiProjektijoukotInnerOminaisuudet
     */
    'vaihe'?: ProjektiProjektijoukotInnerOminaisuudetVaiheEnum;
}

export const ProjektiProjektijoukotInnerOminaisuudetVaylamuotoEnum = {
    Vesi: 'vesi',
    Tie: 'tie',
    Rata: 'rata'
} as const;

export type ProjektiProjektijoukotInnerOminaisuudetVaylamuotoEnum = typeof ProjektiProjektijoukotInnerOminaisuudetVaylamuotoEnum[keyof typeof ProjektiProjektijoukotInnerOminaisuudetVaylamuotoEnum];
export const ProjektiProjektijoukotInnerOminaisuudetTilaEnum = {
    Tila16: 'tila/tila16',
    Tila18: 'tila/tila18',
    Tila15: 'tila/tila15',
    Tila17: 'tila/tila17',
    Tila14: 'tila/tila14'
} as const;

export type ProjektiProjektijoukotInnerOminaisuudetTilaEnum = typeof ProjektiProjektijoukotInnerOminaisuudetTilaEnum[keyof typeof ProjektiProjektijoukotInnerOminaisuudetTilaEnum];
export const ProjektiProjektijoukotInnerOminaisuudetTilaajaorganisaatioEnum = {
    Org08: 'organisaatio/org08',
    Org02: 'organisaatio/org02',
    Org11: 'organisaatio/org11',
    Org10: 'organisaatio/org10',
    Org06: 'organisaatio/org06',
    Org01: 'organisaatio/org01',
    Org07: 'organisaatio/org07',
    Org04: 'organisaatio/org04',
    Org09: 'organisaatio/org09',
    Org05: 'organisaatio/org05',
    Org03: 'organisaatio/org03'
} as const;

export type ProjektiProjektijoukotInnerOminaisuudetTilaajaorganisaatioEnum = typeof ProjektiProjektijoukotInnerOminaisuudetTilaajaorganisaatioEnum[keyof typeof ProjektiProjektijoukotInnerOminaisuudetTilaajaorganisaatioEnum];
export const ProjektiProjektijoukotInnerOminaisuudetRahoituksenLahdeEnum = {
    Rahlah02: 'rahoituslahde/rahlah02',
    Rahlah01: 'rahoituslahde/rahlah01'
} as const;

export type ProjektiProjektijoukotInnerOminaisuudetRahoituksenLahdeEnum = typeof ProjektiProjektijoukotInnerOminaisuudetRahoituksenLahdeEnum[keyof typeof ProjektiProjektijoukotInnerOminaisuudetRahoituksenLahdeEnum];
export const ProjektiProjektijoukotInnerOminaisuudetLiittyvaOrganisaatioEnum = {
    Org08: 'organisaatio/org08',
    Org02: 'organisaatio/org02',
    Org11: 'organisaatio/org11',
    Org10: 'organisaatio/org10',
    Org06: 'organisaatio/org06',
    Org01: 'organisaatio/org01',
    Org07: 'organisaatio/org07',
    Org04: 'organisaatio/org04',
    Org09: 'organisaatio/org09',
    Org05: 'organisaatio/org05',
    Org03: 'organisaatio/org03'
} as const;

export type ProjektiProjektijoukotInnerOminaisuudetLiittyvaOrganisaatioEnum = typeof ProjektiProjektijoukotInnerOminaisuudetLiittyvaOrganisaatioEnum[keyof typeof ProjektiProjektijoukotInnerOminaisuudetLiittyvaOrganisaatioEnum];
export const ProjektiProjektijoukotInnerOminaisuudetVaiheEnum = {
    Pjvaihe02: 'projektijoukon-vaihe/pjvaihe02',
    Pjvaihe01: 'projektijoukon-vaihe/pjvaihe01'
} as const;

export type ProjektiProjektijoukotInnerOminaisuudetVaiheEnum = typeof ProjektiProjektijoukotInnerOminaisuudetVaiheEnum[keyof typeof ProjektiProjektijoukotInnerOminaisuudetVaiheEnum];

/**
 * 
 * @export
 * @interface ProjektiToimeksiannonLisays
 */
export interface ProjektiToimeksiannonLisays {
    /**
     * 
     * @type {ProjektiToimeksiannotInnerOminaisuudet}
     * @memberof ProjektiToimeksiannonLisays
     */
    'ominaisuudet': ProjektiToimeksiannotInnerOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannonLisays
     */
    'projekti': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannonLisays
     */
    'karttapiste': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannonLisays
     */
    'geometry': object | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannonLisays
     */
    'schemaversio': number;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannonLisays
     */
    'muutoksen-lahde-oid'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiToimeksiannonPaivitys
 */
export interface ProjektiToimeksiannonPaivitys {
    /**
     * 
     * @type {ProjektiToimeksiannotInnerOminaisuudet}
     * @memberof ProjektiToimeksiannonPaivitys
     */
    'ominaisuudet': ProjektiToimeksiannotInnerOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannonPaivitys
     */
    'projekti': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannonPaivitys
     */
    'karttapiste': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannonPaivitys
     */
    'geometry': object | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannonPaivitys
     */
    'schemaversio': number;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannonPaivitys
     */
    'muutoksen-lahde-oid'?: string | null;
}
/**
 * 
 * @export
 * @interface ProjektiToimeksiannotInner
 */
export interface ProjektiToimeksiannotInner {
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'muokattu': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'projekti': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'lahdejarjestelma': ProjektiToimeksiannotInnerLahdejarjestelmaEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannotInner
     */
    'paattyen': object | null;
    /**
     * 
     * @type {ProjektiToimeksiannotInnerOminaisuudet}
     * @memberof ProjektiToimeksiannotInner
     */
    'ominaisuudet': ProjektiToimeksiannotInnerOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'oid': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannotInner
     */
    'laskennallinen-keskipiste': object | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiToimeksiannotInner
     */
    'luoja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannotInner
     */
    'geometry': object | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInner
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannotInner
     */
    'alkaen': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiannotInner
     */
    'karttapiste': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiToimeksiannotInner
     */
    'muokkaaja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'luotu': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInner
     */
    'lahdejarjestelman-id': string | null;
}

export const ProjektiToimeksiannotInnerLahdejarjestelmaEnum = {
    Lj05: 'lahdejarjestelma/lj05',
    Lj13: 'lahdejarjestelma/lj13',
    Lj14: 'lahdejarjestelma/lj14',
    Lj03: 'lahdejarjestelma/lj03',
    Lj10: 'lahdejarjestelma/lj10',
    Lj04: 'lahdejarjestelma/lj04',
    Lj08: 'lahdejarjestelma/lj08',
    Lj11: 'lahdejarjestelma/lj11',
    Lj06: 'lahdejarjestelma/lj06',
    Lj02: 'lahdejarjestelma/lj02',
    Lj09: 'lahdejarjestelma/lj09',
    Lj07: 'lahdejarjestelma/lj07',
    Lj15: 'lahdejarjestelma/lj15',
    Lj18: 'lahdejarjestelma/lj18',
    Lj17: 'lahdejarjestelma/lj17',
    Lj20: 'lahdejarjestelma/lj20',
    Lj16: 'lahdejarjestelma/lj16',
    Lj01: 'lahdejarjestelma/lj01',
    Lj19: 'lahdejarjestelma/lj19',
    Lj12: 'lahdejarjestelma/lj12'
} as const;

export type ProjektiToimeksiannotInnerLahdejarjestelmaEnum = typeof ProjektiToimeksiannotInnerLahdejarjestelmaEnum[keyof typeof ProjektiToimeksiannotInnerLahdejarjestelmaEnum];

/**
 * 
 * @export
 * @interface ProjektiToimeksiannotInnerOminaisuudet
 */
export interface ProjektiToimeksiannotInnerOminaisuudet {
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'toteuttava-organisaatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'varahenkilo': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'kuvaus': string | null;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'vaylamuoto': Set<ProjektiToimeksiannotInnerOminaisuudetVaylamuotoEnum>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'kunta': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'tila': ProjektiToimeksiannotInnerOminaisuudetTilaEnum;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'vesivaylanumerot': Set<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'vastuuhenkilo': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'maakunta': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'paattyy': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'asiatunnus': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'nimi': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'toteuttavan-organisaation-yhteyshenkilo': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'tehtava': ProjektiToimeksiannotInnerOminaisuudetTehtavaEnum;
    /**
     * 
     * @type {Set<ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner>}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'tieosoitteet': Set<ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'muu-tehtava'?: string;
    /**
     * 
     * @type {Set<ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner>}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'rataosoitteet': Set<ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudet
     */
    'alkaa': string;
}

export const ProjektiToimeksiannotInnerOminaisuudetVaylamuotoEnum = {
    Vesi: 'vesi',
    Tie: 'tie',
    Rata: 'rata'
} as const;

export type ProjektiToimeksiannotInnerOminaisuudetVaylamuotoEnum = typeof ProjektiToimeksiannotInnerOminaisuudetVaylamuotoEnum[keyof typeof ProjektiToimeksiannotInnerOminaisuudetVaylamuotoEnum];
export const ProjektiToimeksiannotInnerOminaisuudetTilaEnum = {
    Tila16: 'tila/tila16',
    Tila18: 'tila/tila18',
    Tila15: 'tila/tila15',
    Tila17: 'tila/tila17',
    Tila14: 'tila/tila14'
} as const;

export type ProjektiToimeksiannotInnerOminaisuudetTilaEnum = typeof ProjektiToimeksiannotInnerOminaisuudetTilaEnum[keyof typeof ProjektiToimeksiannotInnerOminaisuudetTilaEnum];
export const ProjektiToimeksiannotInnerOminaisuudetTehtavaEnum = {
    Tateh03: 'toimeksiantotehtava/tateh03',
    Tateh07: 'toimeksiantotehtava/tateh07',
    Tateh08: 'toimeksiantotehtava/tateh08',
    Tateh09: 'toimeksiantotehtava/tateh09',
    Tateh10: 'toimeksiantotehtava/tateh10',
    Tateh05: 'toimeksiantotehtava/tateh05',
    Tateh11: 'toimeksiantotehtava/tateh11',
    Tateh02: 'toimeksiantotehtava/tateh02',
    Tateh04: 'toimeksiantotehtava/tateh04',
    Tateh06: 'toimeksiantotehtava/tateh06',
    Tateh01: 'toimeksiantotehtava/tateh01'
} as const;

export type ProjektiToimeksiannotInnerOminaisuudetTehtavaEnum = typeof ProjektiToimeksiannotInnerOminaisuudetTehtavaEnum[keyof typeof ProjektiToimeksiannotInnerOminaisuudetTehtavaEnum];

/**
 * 
 * @export
 * @interface ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner
 */
export interface ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner {
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner
     */
    'alku-km': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner
     */
    'loppu-m': number | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner
     */
    'ratanumero': string;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner
     */
    'loppu-km': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner
     */
    'alku-m': number;
}
/**
 * 
 * @export
 * @interface ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner
 */
export interface ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner {
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner
     */
    'ajorata': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner
     */
    'aosa': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner
     */
    'let': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner
     */
    'losa': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner
     */
    'aet': number;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner
     */
    'tienumero': number;
}
/**
 * 
 * @export
 * @interface ProjektiToimeksianto
 */
export interface ProjektiToimeksianto {
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksianto
     */
    'muokattu': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksianto
     */
    'projekti': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksianto
     */
    'lahdejarjestelma': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksianto
     */
    'muutoksen-lahde-oid'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksianto
     */
    'paattyen': object | null;
    /**
     * 
     * @type {ProjektiToimeksiantoOminaisuudet}
     * @memberof ProjektiToimeksianto
     */
    'ominaisuudet': ProjektiToimeksiantoOminaisuudet;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksianto
     */
    'oid': string;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksianto
     */
    'laskennallinen-keskipiste': object | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiToimeksianto
     */
    'luoja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksianto
     */
    'geometry': object | null;
    /**
     * 
     * @type {number}
     * @memberof ProjektiToimeksianto
     */
    'schemaversio': number;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksianto
     */
    'alkaen': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksianto
     */
    'karttapiste': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksianto
     */
    'edellinen-oid'?: string | null;
    /**
     * 
     * @type {ProjektiProjektijoukotInnerLuoja}
     * @memberof ProjektiToimeksianto
     */
    'muokkaaja': ProjektiProjektijoukotInnerLuoja | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksianto
     */
    'luotu': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksianto
     */
    'lahdejarjestelman-id': string | null;
}
/**
 * 
 * @export
 * @interface ProjektiToimeksiantoOminaisuudet
 */
export interface ProjektiToimeksiantoOminaisuudet {
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'toteuttava-organisaatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'varahenkilo': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'kuvaus': string | null;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'vaylamuoto': Set<ProjektiToimeksiantoOminaisuudetVaylamuotoEnum>;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'kunta': string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'tila': object;
    /**
     * 
     * @type {Set<string>}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'vesivaylanumerot': Set<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'vastuuhenkilo': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'maakunta': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'paattyy': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'asiatunnus': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'nimi': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'toteuttavan-organisaation-yhteyshenkilo': string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'tehtava': object | null;
    /**
     * 
     * @type {Set<ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner>}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'tieosoitteet': Set<ProjektiToimeksiannotInnerOminaisuudetTieosoitteetInner> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'muu-tehtava'?: string;
    /**
     * 
     * @type {Set<ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner>}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'rataosoitteet': Set<ProjektiToimeksiannotInnerOminaisuudetRataosoitteetInner> | null;
    /**
     * 
     * @type {string}
     * @memberof ProjektiToimeksiantoOminaisuudet
     */
    'alkaa': string;
}

export const ProjektiToimeksiantoOminaisuudetVaylamuotoEnum = {
    Vesi: 'vesi',
    Tie: 'tie',
    Rata: 'rata'
} as const;

export type ProjektiToimeksiantoOminaisuudetVaylamuotoEnum = typeof ProjektiToimeksiantoOminaisuudetVaylamuotoEnum[keyof typeof ProjektiToimeksiantoOminaisuudetVaylamuotoEnum];

/**
 * 
 * @export
 * @interface ProjektirekisteriApiV2HakuPost200Response
 */
export interface ProjektirekisteriApiV2HakuPost200Response {
    /**
     * 
     * @type {number}
     * @memberof ProjektirekisteriApiV2HakuPost200Response
     */
    'sivu': number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProjektirekisteriApiV2HakuPost200Response
     */
    'tulokset': Array<object>;
}
/**
 * 
 * @export
 * @interface ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner
 */
export interface ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner {
    /**
     * 
     * @type {string}
     * @memberof ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner
     */
    'kohde': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner
     */
    'lahde': string;
    /**
     * 
     * @type {string}
     * @memberof ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner
     */
    'tyyppi': string;
}
/**
 * 
 * @export
 * @interface ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest
 */
export interface ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest
     */
    'tyyppi': string;
}
/**
 * 
 * @export
 * @interface ProjektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet200Response
 */
export interface ProjektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ProjektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet200Response
     */
    'vektorlinkki': string;
}

/**
 * HakuApi - axios parameter creator
 * @export
 */
export const HakuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Projektien haku suodattimella.
         * @param {object} projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2HakuPost: async (projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku' is not null or undefined
            assertParamExists('projektirekisteriApiV2HakuPost', 'projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku', projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku)
            const localVarPath = `/projektirekisteri/api/v2/haku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HakuApi - functional programming interface
 * @export
 */
export const HakuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HakuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Projektien haku suodattimella.
         * @param {object} projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2HakuPost(projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektirekisteriApiV2HakuPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2HakuPost(projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HakuApi - factory interface
 * @export
 */
export const HakuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HakuApiFp(configuration)
    return {
        /**
         * 
         * @summary Projektien haku suodattimella.
         * @param {object} projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2HakuPost(projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku: object, options?: any): AxiosPromise<ProjektirekisteriApiV2HakuPost200Response> {
            return localVarFp.projektirekisteriApiV2HakuPost(projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HakuApi - object-oriented interface
 * @export
 * @class HakuApi
 * @extends {BaseAPI}
 */
export class HakuApi extends BaseAPI {
    /**
     * 
     * @summary Projektien haku suodattimella.
     * @param {object} projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public projektirekisteriApiV2HakuPost(projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku: object, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).projektirekisteriApiV2HakuPost(projektirekisteriKomponentitPalvelutHakuTallennaProjektirekisterihakuHaku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KohdeApi - axios parameter creator
 * @export
 */
export const KohdeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Palauttaa annetun OIDin mukaisen kohteen (projekti, projektijoukko, toimeksianto).
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2KohdeOidGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('projektirekisteriApiV2KohdeOidGet', 'oid', oid)
            const localVarPath = `/projektirekisteri/api/v2/kohde/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa annettuja OIDeja vastaavan kohdejoukon
         * @param {Array<string>} body 
         * @param {string} [tilannepaiva] 
         * @param {Set<string>} [rikasta] Lisää halutessasi avaimet \&#39;sijainnit\&#39; tai \&#39;geometriat\&#39;. Voit myös antaa kummankin samaan aikaan. Voi myös olla tyhjä.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2KohteetPost: async (body: Array<string>, tilannepaiva?: string, rikasta?: Set<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('projektirekisteriApiV2KohteetPost', 'body', body)
            const localVarPath = `/projektirekisteri/api/v2/kohteet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tilannepaiva !== undefined) {
                localVarQueryParameter['tilannepaiva'] = (tilannepaiva as any instanceof Date) ?
                    (tilannepaiva as any).toISOString().substr(0,10) :
                    tilannepaiva;
            }

            if (rikasta) {
                localVarQueryParameter['rikasta'] = Array.from(rikasta).join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet: async (nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nimiavaruus' is not null or undefined
            assertParamExists('projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet', 'nimiavaruus', nimiavaruus)
            // verify required parameter 'kohdeluokka' is not null or undefined
            assertParamExists('projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet', 'kohdeluokka', kohdeluokka)
            const localVarPath = `/projektirekisteri/api/v2/tunnisteet/{nimiavaruus}/{kohdeluokka}`
                .replace(`{${"nimiavaruus"}}`, encodeURIComponent(String(nimiavaruus)))
                .replace(`{${"kohdeluokka"}}`, encodeURIComponent(String(kohdeluokka)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (alkumuokkausaika !== undefined) {
                localVarQueryParameter['alkumuokkausaika'] = (alkumuokkausaika as any instanceof Date) ?
                    (alkumuokkausaika as any).toISOString() :
                    alkumuokkausaika;
            }

            if (loppumuokkausaika !== undefined) {
                localVarQueryParameter['loppumuokkausaika'] = (loppumuokkausaika as any instanceof Date) ?
                    (loppumuokkausaika as any).toISOString() :
                    loppumuokkausaika;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KohdeApi - functional programming interface
 * @export
 */
export const KohdeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KohdeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Palauttaa annetun OIDin mukaisen kohteen (projekti, projektijoukko, toimeksianto).
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2KohdeOidGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2KohdeOidGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa annettuja OIDeja vastaavan kohdejoukon
         * @param {Array<string>} body 
         * @param {string} [tilannepaiva] 
         * @param {Set<string>} [rikasta] Lisää halutessasi avaimet \&#39;sijainnit\&#39; tai \&#39;geometriat\&#39;. Voit myös antaa kummankin samaan aikaan. Voi myös olla tyhjä.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2KohteetPost(body: Array<string>, tilannepaiva?: string, rikasta?: Set<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2KohteetPost(body, tilannepaiva, rikasta, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KohdeApi - factory interface
 * @export
 */
export const KohdeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KohdeApiFp(configuration)
    return {
        /**
         * 
         * @summary Palauttaa annetun OIDin mukaisen kohteen (projekti, projektijoukko, toimeksianto).
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2KohdeOidGet(oid: string, options?: any): AxiosPromise<object> {
            return localVarFp.projektirekisteriApiV2KohdeOidGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa annettuja OIDeja vastaavan kohdejoukon
         * @param {Array<string>} body 
         * @param {string} [tilannepaiva] 
         * @param {Set<string>} [rikasta] Lisää halutessasi avaimet \&#39;sijainnit\&#39; tai \&#39;geometriat\&#39;. Voit myös antaa kummankin samaan aikaan. Voi myös olla tyhjä.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2KohteetPost(body: Array<string>, tilannepaiva?: string, rikasta?: Set<string>, options?: any): AxiosPromise<void> {
            return localVarFp.projektirekisteriApiV2KohteetPost(body, tilannepaiva, rikasta, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
         * @param {string} nimiavaruus 
         * @param {string} kohdeluokka 
         * @param {string} [alkumuokkausaika] 
         * @param {string} [loppumuokkausaika] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: any): AxiosPromise<object> {
            return localVarFp.projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KohdeApi - object-oriented interface
 * @export
 * @class KohdeApi
 * @extends {BaseAPI}
 */
export class KohdeApi extends BaseAPI {
    /**
     * 
     * @summary Palauttaa annetun OIDin mukaisen kohteen (projekti, projektijoukko, toimeksianto).
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public projektirekisteriApiV2KohdeOidGet(oid: string, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).projektirekisteriApiV2KohdeOidGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa annettuja OIDeja vastaavan kohdejoukon
     * @param {Array<string>} body 
     * @param {string} [tilannepaiva] 
     * @param {Set<string>} [rikasta] Lisää halutessasi avaimet \&#39;sijainnit\&#39; tai \&#39;geometriat\&#39;. Voit myös antaa kummankin samaan aikaan. Voi myös olla tyhjä.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public projektirekisteriApiV2KohteetPost(body: Array<string>, tilannepaiva?: string, rikasta?: Set<string>, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).projektirekisteriApiV2KohteetPost(body, tilannepaiva, rikasta, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa annetun kohdeluokan kohteiden tunnisteet (OIDit), joko kaikki tai annetun aikavälin sisällä muuttuneet
     * @param {string} nimiavaruus 
     * @param {string} kohdeluokka 
     * @param {string} [alkumuokkausaika] 
     * @param {string} [loppumuokkausaika] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KohdeApi
     */
    public projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus: string, kohdeluokka: string, alkumuokkausaika?: string, loppumuokkausaika?: string, options?: AxiosRequestConfig) {
        return KohdeApiFp(this.configuration).projektirekisteriApiV2TunnisteetNimiavaruusKohdeluokkaGet(nimiavaruus, kohdeluokka, alkumuokkausaika, loppumuokkausaika, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MassatransformaatioApi - axios parameter creator
 * @export
 */
export const MassatransformaatioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Käynnistää annetun kohdeluokan massatransformaation uusimpaan skeemaversioon.
         * @param {any} kohdeluokka 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet: async (kohdeluokka: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kohdeluokka' is not null or undefined
            assertParamExists('projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet', 'kohdeluokka', kohdeluokka)
            const localVarPath = `/projektirekisteri/api/v2/massatransformaatio/kaynnista/{kohdeluokka}`
                .replace(`{${"kohdeluokka"}}`, encodeURIComponent(String(kohdeluokka)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MassatransformaatioApi - functional programming interface
 * @export
 */
export const MassatransformaatioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MassatransformaatioApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Käynnistää annetun kohdeluokan massatransformaation uusimpaan skeemaversioon.
         * @param {any} kohdeluokka 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet(kohdeluokka: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet(kohdeluokka, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MassatransformaatioApi - factory interface
 * @export
 */
export const MassatransformaatioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MassatransformaatioApiFp(configuration)
    return {
        /**
         * 
         * @summary Käynnistää annetun kohdeluokan massatransformaation uusimpaan skeemaversioon.
         * @param {any} kohdeluokka 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet(kohdeluokka: any, options?: any): AxiosPromise<object> {
            return localVarFp.projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet(kohdeluokka, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MassatransformaatioApi - object-oriented interface
 * @export
 * @class MassatransformaatioApi
 * @extends {BaseAPI}
 */
export class MassatransformaatioApi extends BaseAPI {
    /**
     * 
     * @summary Käynnistää annetun kohdeluokan massatransformaation uusimpaan skeemaversioon.
     * @param {any} kohdeluokka 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MassatransformaatioApi
     */
    public projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet(kohdeluokka: any, options?: AxiosRequestConfig) {
        return MassatransformaatioApiFp(this.configuration).projektirekisteriApiV2MassatransformaatioKaynnistaKohdeluokkaGet(kohdeluokka, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjektiApi - axios parameter creator
 * @export
 */
export const ProjektiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Palauttaa kaikki projektit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projektirekisteri/api/v2/projekti`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Luo uuden projektin annettuilla tiedoilla.
         * @param {ProjektiProjektiLuonti} projektiProjektiluonti 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiPost: async (projektiProjektiluonti: ProjektiProjektiLuonti, eiGeometrioita?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiProjektiluonti' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiPost', 'projektiProjektiluonti', projektiProjektiluonti)
            const localVarPath = `/projektirekisteri/api/v2/projekti`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eiGeometrioita !== undefined) {
                localVarQueryParameter['ei-geometrioita'] = eiGeometrioita;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projektiProjektiluonti, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mitätöi projektin
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidDelete: async (projektiOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidDelete', 'projektiOid', projektiOid)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa projektin.
         * @param {string} projektiOid 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidGet: async (projektiOid: string, eiGeometrioita?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidGet', 'projektiOid', projektiOid)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eiGeometrioita !== undefined) {
                localVarQueryParameter['ei-geometrioita'] = eiGeometrioita;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa projektiin linkitetyt kohdeprojektit.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitGet: async (projektiOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitGet', 'projektiOid', projektiOid)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}/linkit`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poistaa projektilta linkin annettuun kohdeprojektiin ja kohdeprojektilta lähdeprojektiin.
         * @param {string} projektiOid 
         * @param {string} kohdeOid 
         * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete: async (projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete', 'projektiOid', projektiOid)
            // verify required parameter 'kohdeOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete', 'kohdeOid', kohdeOid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete', 'body', body)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}/linkit/{kohde-oid}`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)))
                .replace(`{${"kohde-oid"}}`, encodeURIComponent(String(kohdeOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Linkittää projektin annettuun kohdeprojektiin ja kohdeprojektin lähdeprojektiin samalla linkkityypillä.
         * @param {string} projektiOid 
         * @param {string} kohdeOid 
         * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost: async (projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost', 'projektiOid', projektiOid)
            // verify required parameter 'kohdeOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost', 'kohdeOid', kohdeOid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost', 'body', body)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}/linkit/{kohde-oid}`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)))
                .replace(`{${"kohde-oid"}}`, encodeURIComponent(String(kohdeOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Asettaa projektille ja linkitetyille projekteille annetut linkit
         * @param {string} projektiOid 
         * @param {Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitPut: async (projektiOid: string, body: Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitPut', 'projektiOid', projektiOid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidLinkitPut', 'body', body)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}/linkit`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Päivittää projektin annettujen tietojen mukaiseksi.
         * @param {string} projektiOid 
         * @param {ProjektiProjektiMuokkaus} projektiProjektimuokkaus 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidPut: async (projektiOid: string, projektiProjektimuokkaus: ProjektiProjektiMuokkaus, eiGeometrioita?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidPut', 'projektiOid', projektiOid)
            // verify required parameter 'projektiProjektimuokkaus' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidPut', 'projektiProjektimuokkaus', projektiProjektimuokkaus)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eiGeometrioita !== undefined) {
                localVarQueryParameter['ei-geometrioita'] = eiGeometrioita;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projektiProjektimuokkaus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa projektin toimeksiantolistauksen.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet: async (projektiOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet', 'projektiOid', projektiOid)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}/toimeksiannot`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poistaa projektilta vektorid:n, mikä osoittaa että projekti ei ole enää Vektoriossa.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidVektoridDelete: async (projektiOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidVektoridDelete', 'projektiOid', projektiOid)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}/vektorid`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa käyttäjäkohtaisen linkin projektille Vektor vieweriin.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet: async (projektiOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet', 'projektiOid', projektiOid)
            const localVarPath = `/projektirekisteri/api/v2/projekti/{projekti-oid}/vektorlinkki`
                .replace(`{${"projekti-oid"}}`, encodeURIComponent(String(projektiOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjektiApi - functional programming interface
 * @export
 */
export const ProjektiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjektiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Palauttaa kaikki projektit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Luo uuden projektin annettuilla tiedoilla.
         * @param {ProjektiProjektiLuonti} projektiProjektiluonti 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiPost(projektiProjektiluonti: ProjektiProjektiLuonti, eiGeometrioita?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiPost(projektiProjektiluonti, eiGeometrioita, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mitätöi projektin
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidDelete(projektiOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidDelete(projektiOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa projektin.
         * @param {string} projektiOid 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidGet(projektiOid: string, eiGeometrioita?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidGet(projektiOid, eiGeometrioita, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa projektiin linkitetyt kohdeprojektit.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidLinkitGet(projektiOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidLinkitGet(projektiOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poistaa projektilta linkin annettuun kohdeprojektiin ja kohdeprojektilta lähdeprojektiin.
         * @param {string} projektiOid 
         * @param {string} kohdeOid 
         * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete(projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete(projektiOid, kohdeOid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Linkittää projektin annettuun kohdeprojektiin ja kohdeprojektin lähdeprojektiin samalla linkkityypillä.
         * @param {string} projektiOid 
         * @param {string} kohdeOid 
         * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost(projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost(projektiOid, kohdeOid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Asettaa projektille ja linkitetyille projekteille annetut linkit
         * @param {string} projektiOid 
         * @param {Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidLinkitPut(projektiOid: string, body: Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidLinkitPut(projektiOid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Päivittää projektin annettujen tietojen mukaiseksi.
         * @param {string} projektiOid 
         * @param {ProjektiProjektiMuokkaus} projektiProjektimuokkaus 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidPut(projektiOid: string, projektiProjektimuokkaus: ProjektiProjektiMuokkaus, eiGeometrioita?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidPut(projektiOid, projektiProjektimuokkaus, eiGeometrioita, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa projektin toimeksiantolistauksen.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet(projektiOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<ProjektiToimeksiannotInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet(projektiOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poistaa projektilta vektorid:n, mikä osoittaa että projekti ei ole enää Vektoriossa.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidVektoridDelete(projektiOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjekti>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidVektoridDelete(projektiOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa käyttäjäkohtaisen linkin projektille Vektor vieweriin.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet(projektiOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet(projektiOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjektiApi - factory interface
 * @export
 */
export const ProjektiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjektiApiFp(configuration)
    return {
        /**
         * 
         * @summary Palauttaa kaikki projektit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiGet(options?: any): AxiosPromise<void> {
            return localVarFp.projektirekisteriApiV2ProjektiGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Luo uuden projektin annettuilla tiedoilla.
         * @param {ProjektiProjektiLuonti} projektiProjektiluonti 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiPost(projektiProjektiluonti: ProjektiProjektiLuonti, eiGeometrioita?: boolean, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiPost(projektiProjektiluonti, eiGeometrioita, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mitätöi projektin
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidDelete(projektiOid: string, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidDelete(projektiOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa projektin.
         * @param {string} projektiOid 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidGet(projektiOid: string, eiGeometrioita?: boolean, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidGet(projektiOid, eiGeometrioita, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa projektiin linkitetyt kohdeprojektit.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitGet(projektiOid: string, options?: any): AxiosPromise<void> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidLinkitGet(projektiOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poistaa projektilta linkin annettuun kohdeprojektiin ja kohdeprojektilta lähdeprojektiin.
         * @param {string} projektiOid 
         * @param {string} kohdeOid 
         * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete(projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete(projektiOid, kohdeOid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Linkittää projektin annettuun kohdeprojektiin ja kohdeprojektin lähdeprojektiin samalla linkkityypillä.
         * @param {string} projektiOid 
         * @param {string} kohdeOid 
         * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost(projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost(projektiOid, kohdeOid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Asettaa projektille ja linkitetyille projekteille annetut linkit
         * @param {string} projektiOid 
         * @param {Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidLinkitPut(projektiOid: string, body: Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidLinkitPut(projektiOid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Päivittää projektin annettujen tietojen mukaiseksi.
         * @param {string} projektiOid 
         * @param {ProjektiProjektiMuokkaus} projektiProjektimuokkaus 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidPut(projektiOid: string, projektiProjektimuokkaus: ProjektiProjektiMuokkaus, eiGeometrioita?: boolean, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidPut(projektiOid, projektiProjektimuokkaus, eiGeometrioita, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa projektin toimeksiantolistauksen.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet(projektiOid: string, options?: any): AxiosPromise<Set<ProjektiToimeksiannotInner>> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet(projektiOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poistaa projektilta vektorid:n, mikä osoittaa että projekti ei ole enää Vektoriossa.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidVektoridDelete(projektiOid: string, options?: any): AxiosPromise<ProjektiProjekti> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidVektoridDelete(projektiOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa käyttäjäkohtaisen linkin projektille Vektor vieweriin.
         * @param {string} projektiOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet(projektiOid: string, options?: any): AxiosPromise<ProjektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet200Response> {
            return localVarFp.projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet(projektiOid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjektiApi - object-oriented interface
 * @export
 * @class ProjektiApi
 * @extends {BaseAPI}
 */
export class ProjektiApi extends BaseAPI {
    /**
     * 
     * @summary Palauttaa kaikki projektit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiGet(options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Luo uuden projektin annettuilla tiedoilla.
     * @param {ProjektiProjektiLuonti} projektiProjektiluonti 
     * @param {boolean} [eiGeometrioita] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiPost(projektiProjektiluonti: ProjektiProjektiLuonti, eiGeometrioita?: boolean, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiPost(projektiProjektiluonti, eiGeometrioita, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mitätöi projektin
     * @param {string} projektiOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidDelete(projektiOid: string, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidDelete(projektiOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa projektin.
     * @param {string} projektiOid 
     * @param {boolean} [eiGeometrioita] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidGet(projektiOid: string, eiGeometrioita?: boolean, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidGet(projektiOid, eiGeometrioita, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa projektiin linkitetyt kohdeprojektit.
     * @param {string} projektiOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidLinkitGet(projektiOid: string, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidLinkitGet(projektiOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poistaa projektilta linkin annettuun kohdeprojektiin ja kohdeprojektilta lähdeprojektiin.
     * @param {string} projektiOid 
     * @param {string} kohdeOid 
     * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete(projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDelete(projektiOid, kohdeOid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Linkittää projektin annettuun kohdeprojektiin ja kohdeprojektin lähdeprojektiin samalla linkkityypillä.
     * @param {string} projektiOid 
     * @param {string} kohdeOid 
     * @param {ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost(projektiOid: string, kohdeOid: string, body: ProjektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidDeleteRequest, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidLinkitKohdeOidPost(projektiOid, kohdeOid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Asettaa projektille ja linkitetyille projekteille annetut linkit
     * @param {string} projektiOid 
     * @param {Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidLinkitPut(projektiOid: string, body: Array<ProjektirekisteriApiV2ProjektiProjektiOidLinkitGetRequestInner>, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidLinkitPut(projektiOid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Päivittää projektin annettujen tietojen mukaiseksi.
     * @param {string} projektiOid 
     * @param {ProjektiProjektiMuokkaus} projektiProjektimuokkaus 
     * @param {boolean} [eiGeometrioita] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidPut(projektiOid: string, projektiProjektimuokkaus: ProjektiProjektiMuokkaus, eiGeometrioita?: boolean, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidPut(projektiOid, projektiProjektimuokkaus, eiGeometrioita, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa projektin toimeksiantolistauksen.
     * @param {string} projektiOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet(projektiOid: string, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidToimeksiannotGet(projektiOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poistaa projektilta vektorid:n, mikä osoittaa että projekti ei ole enää Vektoriossa.
     * @param {string} projektiOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidVektoridDelete(projektiOid: string, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidVektoridDelete(projektiOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa käyttäjäkohtaisen linkin projektille Vektor vieweriin.
     * @param {string} projektiOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektiApi
     */
    public projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet(projektiOid: string, options?: AxiosRequestConfig) {
        return ProjektiApiFp(this.configuration).projektirekisteriApiV2ProjektiProjektiOidVektorlinkkiGet(projektiOid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjektijoukkoApi - axios parameter creator
 * @export
 */
export const ProjektijoukkoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Palauttaa kaikki projektijoukot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projektirekisteri/api/v2/projektijoukko`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Luo uuden projektijoukon annetuilla tiedoilla.
         * @param {ProjektiProjektijoukonLisays} projektiProjektijoukonLisays 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoPost: async (projektiProjektijoukonLisays: ProjektiProjektijoukonLisays, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiProjektijoukonLisays' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektijoukkoPost', 'projektiProjektijoukonLisays', projektiProjektijoukonLisays)
            const localVarPath = `/projektirekisteri/api/v2/projektijoukko`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projektiProjektijoukonLisays, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mitätöi projektijoukon
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete: async (projektijoukkoOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektijoukkoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete', 'projektijoukkoOid', projektijoukkoOid)
            const localVarPath = `/projektirekisteri/api/v2/projektijoukko/{projektijoukko-oid}`
                .replace(`{${"projektijoukko-oid"}}`, encodeURIComponent(String(projektijoukkoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa projektijoukon.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet: async (projektijoukkoOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektijoukkoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet', 'projektijoukkoOid', projektijoukkoOid)
            const localVarPath = `/projektirekisteri/api/v2/projektijoukko/{projektijoukko-oid}`
                .replace(`{${"projektijoukko-oid"}}`, encodeURIComponent(String(projektijoukkoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa projektijoukon projektilistauksen.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet: async (projektijoukkoOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektijoukkoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet', 'projektijoukkoOid', projektijoukkoOid)
            const localVarPath = `/projektirekisteri/api/v2/projektijoukko/{projektijoukko-oid}/projektit`
                .replace(`{${"projektijoukko-oid"}}`, encodeURIComponent(String(projektijoukkoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Päivittää projektijoukon annettujen tietojen mukaiseksi.
         * @param {string} projektijoukkoOid 
         * @param {ProjektiProjektijoukonPaivitys} projektiProjektijoukonPaivitys 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut: async (projektijoukkoOid: string, projektiProjektijoukonPaivitys: ProjektiProjektijoukonPaivitys, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektijoukkoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut', 'projektijoukkoOid', projektijoukkoOid)
            // verify required parameter 'projektiProjektijoukonPaivitys' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut', 'projektiProjektijoukonPaivitys', projektiProjektijoukonPaivitys)
            const localVarPath = `/projektirekisteri/api/v2/projektijoukko/{projektijoukko-oid}`
                .replace(`{${"projektijoukko-oid"}}`, encodeURIComponent(String(projektijoukkoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projektiProjektijoukonPaivitys, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa käyttäjäkohtaisen linkin projektijoukolle Vektor vieweriin.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet: async (projektijoukkoOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektijoukkoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet', 'projektijoukkoOid', projektijoukkoOid)
            const localVarPath = `/projektirekisteri/api/v2/projektijoukko/{projektijoukko-oid}/vektorlinkki`
                .replace(`{${"projektijoukko-oid"}}`, encodeURIComponent(String(projektijoukkoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjektijoukkoApi - functional programming interface
 * @export
 */
export const ProjektijoukkoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjektijoukkoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Palauttaa kaikki projektijoukot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektijoukkoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<ProjektiProjektijoukotInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektijoukkoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Luo uuden projektijoukon annetuilla tiedoilla.
         * @param {ProjektiProjektijoukonLisays} projektiProjektijoukonLisays 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektijoukkoPost(projektiProjektijoukonLisays: ProjektiProjektijoukonLisays, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjektijoukko>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektijoukkoPost(projektiProjektijoukonLisays, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mitätöi projektijoukon
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete(projektijoukkoOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete(projektijoukkoOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa projektijoukon.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet(projektijoukkoOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjektijoukko>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet(projektijoukkoOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa projektijoukon projektilistauksen.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet(projektijoukkoOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet(projektijoukkoOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Päivittää projektijoukon annettujen tietojen mukaiseksi.
         * @param {string} projektijoukkoOid 
         * @param {ProjektiProjektijoukonPaivitys} projektiProjektijoukonPaivitys 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut(projektijoukkoOid: string, projektiProjektijoukonPaivitys: ProjektiProjektijoukonPaivitys, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiProjektijoukko>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut(projektijoukkoOid, projektiProjektijoukonPaivitys, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa käyttäjäkohtaisen linkin projektijoukolle Vektor vieweriin.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet(projektijoukkoOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet(projektijoukkoOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjektijoukkoApi - factory interface
 * @export
 */
export const ProjektijoukkoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjektijoukkoApiFp(configuration)
    return {
        /**
         * 
         * @summary Palauttaa kaikki projektijoukot.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoGet(options?: any): AxiosPromise<Set<ProjektiProjektijoukotInner>> {
            return localVarFp.projektirekisteriApiV2ProjektijoukkoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Luo uuden projektijoukon annetuilla tiedoilla.
         * @param {ProjektiProjektijoukonLisays} projektiProjektijoukonLisays 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoPost(projektiProjektijoukonLisays: ProjektiProjektijoukonLisays, options?: any): AxiosPromise<ProjektiProjektijoukko> {
            return localVarFp.projektirekisteriApiV2ProjektijoukkoPost(projektiProjektijoukonLisays, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mitätöi projektijoukon
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete(projektijoukkoOid: string, options?: any): AxiosPromise<void> {
            return localVarFp.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete(projektijoukkoOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa projektijoukon.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet(projektijoukkoOid: string, options?: any): AxiosPromise<ProjektiProjektijoukko> {
            return localVarFp.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet(projektijoukkoOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa projektijoukon projektilistauksen.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet(projektijoukkoOid: string, options?: any): AxiosPromise<void> {
            return localVarFp.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet(projektijoukkoOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Päivittää projektijoukon annettujen tietojen mukaiseksi.
         * @param {string} projektijoukkoOid 
         * @param {ProjektiProjektijoukonPaivitys} projektiProjektijoukonPaivitys 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut(projektijoukkoOid: string, projektiProjektijoukonPaivitys: ProjektiProjektijoukonPaivitys, options?: any): AxiosPromise<ProjektiProjektijoukko> {
            return localVarFp.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut(projektijoukkoOid, projektiProjektijoukonPaivitys, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa käyttäjäkohtaisen linkin projektijoukolle Vektor vieweriin.
         * @param {string} projektijoukkoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet(projektijoukkoOid: string, options?: any): AxiosPromise<ProjektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet200Response> {
            return localVarFp.projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet(projektijoukkoOid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjektijoukkoApi - object-oriented interface
 * @export
 * @class ProjektijoukkoApi
 * @extends {BaseAPI}
 */
export class ProjektijoukkoApi extends BaseAPI {
    /**
     * 
     * @summary Palauttaa kaikki projektijoukot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektijoukkoApi
     */
    public projektirekisteriApiV2ProjektijoukkoGet(options?: AxiosRequestConfig) {
        return ProjektijoukkoApiFp(this.configuration).projektirekisteriApiV2ProjektijoukkoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Luo uuden projektijoukon annetuilla tiedoilla.
     * @param {ProjektiProjektijoukonLisays} projektiProjektijoukonLisays 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektijoukkoApi
     */
    public projektirekisteriApiV2ProjektijoukkoPost(projektiProjektijoukonLisays: ProjektiProjektijoukonLisays, options?: AxiosRequestConfig) {
        return ProjektijoukkoApiFp(this.configuration).projektirekisteriApiV2ProjektijoukkoPost(projektiProjektijoukonLisays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mitätöi projektijoukon
     * @param {string} projektijoukkoOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektijoukkoApi
     */
    public projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete(projektijoukkoOid: string, options?: AxiosRequestConfig) {
        return ProjektijoukkoApiFp(this.configuration).projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidDelete(projektijoukkoOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa projektijoukon.
     * @param {string} projektijoukkoOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektijoukkoApi
     */
    public projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet(projektijoukkoOid: string, options?: AxiosRequestConfig) {
        return ProjektijoukkoApiFp(this.configuration).projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidGet(projektijoukkoOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa projektijoukon projektilistauksen.
     * @param {string} projektijoukkoOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektijoukkoApi
     */
    public projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet(projektijoukkoOid: string, options?: AxiosRequestConfig) {
        return ProjektijoukkoApiFp(this.configuration).projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidProjektitGet(projektijoukkoOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Päivittää projektijoukon annettujen tietojen mukaiseksi.
     * @param {string} projektijoukkoOid 
     * @param {ProjektiProjektijoukonPaivitys} projektiProjektijoukonPaivitys 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektijoukkoApi
     */
    public projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut(projektijoukkoOid: string, projektiProjektijoukonPaivitys: ProjektiProjektijoukonPaivitys, options?: AxiosRequestConfig) {
        return ProjektijoukkoApiFp(this.configuration).projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidPut(projektijoukkoOid, projektiProjektijoukonPaivitys, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa käyttäjäkohtaisen linkin projektijoukolle Vektor vieweriin.
     * @param {string} projektijoukkoOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjektijoukkoApi
     */
    public projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet(projektijoukkoOid: string, options?: AxiosRequestConfig) {
        return ProjektijoukkoApiFp(this.configuration).projektirekisteriApiV2ProjektijoukkoProjektijoukkoOidVektorlinkkiGet(projektijoukkoOid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ToimeksiantoApi - axios parameter creator
 * @export
 */
export const ToimeksiantoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Luo uuden toimeksiannon annettuilla tiedoilla.
         * @param {ProjektiToimeksiannonLisays} projektiToimeksiannonLisays 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoPost: async (projektiToimeksiannonLisays: ProjektiToimeksiannonLisays, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projektiToimeksiannonLisays' is not null or undefined
            assertParamExists('projektirekisteriApiV2ToimeksiantoPost', 'projektiToimeksiannonLisays', projektiToimeksiannonLisays)
            const localVarPath = `/projektirekisteri/api/v2/toimeksianto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projektiToimeksiannonLisays, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mitätöi toimeksiannon.
         * @param {string} toimeksiantoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete: async (toimeksiantoOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toimeksiantoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete', 'toimeksiantoOid', toimeksiantoOid)
            const localVarPath = `/projektirekisteri/api/v2/toimeksianto/{toimeksianto-oid}`
                .replace(`{${"toimeksianto-oid"}}`, encodeURIComponent(String(toimeksiantoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Palauttaa toimeksiannon.
         * @param {string} toimeksiantoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet: async (toimeksiantoOid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toimeksiantoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet', 'toimeksiantoOid', toimeksiantoOid)
            const localVarPath = `/projektirekisteri/api/v2/toimeksianto/{toimeksianto-oid}`
                .replace(`{${"toimeksianto-oid"}}`, encodeURIComponent(String(toimeksiantoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Päivittää toimeksiannon annettujen tietojen mukaiseksi.
         * @param {string} toimeksiantoOid 
         * @param {ProjektiToimeksiannonPaivitys} projektiToimeksiannonPaivitys 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut: async (toimeksiantoOid: string, projektiToimeksiannonPaivitys: ProjektiToimeksiannonPaivitys, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toimeksiantoOid' is not null or undefined
            assertParamExists('projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut', 'toimeksiantoOid', toimeksiantoOid)
            // verify required parameter 'projektiToimeksiannonPaivitys' is not null or undefined
            assertParamExists('projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut', 'projektiToimeksiannonPaivitys', projektiToimeksiannonPaivitys)
            const localVarPath = `/projektirekisteri/api/v2/toimeksianto/{toimeksianto-oid}`
                .replace(`{${"toimeksianto-oid"}}`, encodeURIComponent(String(toimeksiantoOid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projektiToimeksiannonPaivitys, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToimeksiantoApi - functional programming interface
 * @export
 */
export const ToimeksiantoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToimeksiantoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Luo uuden toimeksiannon annettuilla tiedoilla.
         * @param {ProjektiToimeksiannonLisays} projektiToimeksiannonLisays 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ToimeksiantoPost(projektiToimeksiannonLisays: ProjektiToimeksiannonLisays, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiToimeksianto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ToimeksiantoPost(projektiToimeksiannonLisays, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mitätöi toimeksiannon.
         * @param {string} toimeksiantoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete(toimeksiantoOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete(toimeksiantoOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Palauttaa toimeksiannon.
         * @param {string} toimeksiantoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet(toimeksiantoOid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiToimeksianto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet(toimeksiantoOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Päivittää toimeksiannon annettujen tietojen mukaiseksi.
         * @param {string} toimeksiantoOid 
         * @param {ProjektiToimeksiannonPaivitys} projektiToimeksiannonPaivitys 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut(toimeksiantoOid: string, projektiToimeksiannonPaivitys: ProjektiToimeksiannonPaivitys, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjektiToimeksianto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut(toimeksiantoOid, projektiToimeksiannonPaivitys, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ToimeksiantoApi - factory interface
 * @export
 */
export const ToimeksiantoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToimeksiantoApiFp(configuration)
    return {
        /**
         * 
         * @summary Luo uuden toimeksiannon annettuilla tiedoilla.
         * @param {ProjektiToimeksiannonLisays} projektiToimeksiannonLisays 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoPost(projektiToimeksiannonLisays: ProjektiToimeksiannonLisays, options?: any): AxiosPromise<ProjektiToimeksianto> {
            return localVarFp.projektirekisteriApiV2ToimeksiantoPost(projektiToimeksiannonLisays, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mitätöi toimeksiannon.
         * @param {string} toimeksiantoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete(toimeksiantoOid: string, options?: any): AxiosPromise<void> {
            return localVarFp.projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete(toimeksiantoOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Palauttaa toimeksiannon.
         * @param {string} toimeksiantoOid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet(toimeksiantoOid: string, options?: any): AxiosPromise<ProjektiToimeksianto> {
            return localVarFp.projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet(toimeksiantoOid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Päivittää toimeksiannon annettujen tietojen mukaiseksi.
         * @param {string} toimeksiantoOid 
         * @param {ProjektiToimeksiannonPaivitys} projektiToimeksiannonPaivitys 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut(toimeksiantoOid: string, projektiToimeksiannonPaivitys: ProjektiToimeksiannonPaivitys, options?: any): AxiosPromise<ProjektiToimeksianto> {
            return localVarFp.projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut(toimeksiantoOid, projektiToimeksiannonPaivitys, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToimeksiantoApi - object-oriented interface
 * @export
 * @class ToimeksiantoApi
 * @extends {BaseAPI}
 */
export class ToimeksiantoApi extends BaseAPI {
    /**
     * 
     * @summary Luo uuden toimeksiannon annettuilla tiedoilla.
     * @param {ProjektiToimeksiannonLisays} projektiToimeksiannonLisays 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToimeksiantoApi
     */
    public projektirekisteriApiV2ToimeksiantoPost(projektiToimeksiannonLisays: ProjektiToimeksiannonLisays, options?: AxiosRequestConfig) {
        return ToimeksiantoApiFp(this.configuration).projektirekisteriApiV2ToimeksiantoPost(projektiToimeksiannonLisays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mitätöi toimeksiannon.
     * @param {string} toimeksiantoOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToimeksiantoApi
     */
    public projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete(toimeksiantoOid: string, options?: AxiosRequestConfig) {
        return ToimeksiantoApiFp(this.configuration).projektirekisteriApiV2ToimeksiantoToimeksiantoOidDelete(toimeksiantoOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Palauttaa toimeksiannon.
     * @param {string} toimeksiantoOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToimeksiantoApi
     */
    public projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet(toimeksiantoOid: string, options?: AxiosRequestConfig) {
        return ToimeksiantoApiFp(this.configuration).projektirekisteriApiV2ToimeksiantoToimeksiantoOidGet(toimeksiantoOid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Päivittää toimeksiannon annettujen tietojen mukaiseksi.
     * @param {string} toimeksiantoOid 
     * @param {ProjektiToimeksiannonPaivitys} projektiToimeksiannonPaivitys 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToimeksiantoApi
     */
    public projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut(toimeksiantoOid: string, projektiToimeksiannonPaivitys: ProjektiToimeksiannonPaivitys, options?: AxiosRequestConfig) {
        return ToimeksiantoApiFp(this.configuration).projektirekisteriApiV2ToimeksiantoToimeksiantoOidPut(toimeksiantoOid, projektiToimeksiannonPaivitys, options).then((request) => request(this.axios, this.basePath));
    }
}


