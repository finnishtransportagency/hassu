/* tslint:disable */
/* eslint-disable */
/**
 * Hakupalvelu API v1
 * Hakupalvelu API v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HakulausekeAsetukset
 */
export interface HakulausekeAsetukset {
    /**
     * 
     * @type {Array<object>}
     * @memberof HakulausekeAsetukset
     */
    'aggregaatiot'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof HakulausekeAsetukset
     */
    'liitoshaku'?: boolean;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof HakulausekeAsetukset
     */
    'palautettavat-kentat'?: Array<Array<string>>;
    /**
     * 
     * @type {number}
     * @memberof HakulausekeAsetukset
     */
    'koko'?: number;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof HakulausekeAsetukset
     */
    'pilkkovat-polut'?: Array<Array<string>>;
    /**
     * 
     * @type {number}
     * @memberof HakulausekeAsetukset
     */
    'alkaen'?: number;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof HakulausekeAsetukset
     */
    'poistettavat-kentat'?: Array<Array<string>>;
    /**
     * 
     * @type {boolean}
     * @memberof HakulausekeAsetukset
     */
    'samalla-kaistalla'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof HakulausekeAsetukset
     */
    'geometriat'?: Array<HakulausekeAsetuksetGeometriatEnum>;
    /**
     * 
     * @type {string}
     * @memberof HakulausekeAsetukset
     */
    'tilannepaivamaara'?: string;
    /**
     * 
     * @type {string}
     * @memberof HakulausekeAsetukset
     */
    'tyyppi'?: HakulausekeAsetuksetTyyppiEnum;
    /**
     * 
     * @type {Array<Array<object>>}
     * @memberof HakulausekeAsetukset
     */
    'jarjesta'?: Array<Array<object>>;
}

export const HakulausekeAsetuksetGeometriatEnum = {
    GeometriaWgs84: 'geometria-wgs84',
    Geometria: 'geometria',
    KeskilinjageometriaWgs84: 'keskilinjageometria-wgs84',
    Geometrycollection: 'geometrycollection',
    Keskilinjageometria: 'keskilinjageometria'
} as const;

export type HakulausekeAsetuksetGeometriatEnum = typeof HakulausekeAsetuksetGeometriatEnum[keyof typeof HakulausekeAsetuksetGeometriatEnum];
export const HakulausekeAsetuksetTyyppiEnum = {
    Tieosuushaku: 'tieosuushaku',
    Kohdeluokkahaku: 'kohdeluokkahaku'
} as const;

export type HakulausekeAsetuksetTyyppiEnum = typeof HakulausekeAsetuksetTyyppiEnum[keyof typeof HakulausekeAsetuksetTyyppiEnum];

/**
 * 
 * @export
 * @interface HakulausekeKysely
 */
export interface HakulausekeKysely {
    /**
     * 
     * @type {Array<string>}
     * @memberof HakulausekeKysely
     */
    'kohdeluokat': Array<string>;
    /**
     * 
     * @type {HakulausekeAsetukset}
     * @memberof HakulausekeKysely
     */
    'asetukset': HakulausekeAsetukset;
    /**
     * 
     * @type {object}
     * @memberof HakulausekeKysely
     */
    'lauseke'?: object;
    /**
     * 
     * @type {HakulausekeLisarajaukset}
     * @memberof HakulausekeKysely
     */
    'lisarajaukset'?: HakulausekeLisarajaukset;
}
/**
 * 
 * @export
 * @interface HakulausekeLisarajaukset
 */
export interface HakulausekeLisarajaukset {
    /**
     * 
     * @type {Array<string>}
     * @memberof HakulausekeLisarajaukset
     */
    'kohdeluokat': Array<string>;
    /**
     * 
     * @type {object}
     * @memberof HakulausekeLisarajaukset
     */
    'lauseke': object;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecHaku
 */
export interface HakupalveluSpecHakuspecHaku {
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'sivu'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'palautettavat-kentat'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'haku'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'suodata'?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'koko'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'kohdeluokat': Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'poistettavat-kentat'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'termi-aggregaatio'?: Array<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof HakupalveluSpecHakuspecHaku
     */
    'jarjesta'?: Array<{ [key: string]: object; }>;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecHakutulokset
 */
export interface HakupalveluSpecHakuspecHakutulokset {
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'osumia': number;
    /**
     * 
     * @type {Array<object>}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'osumat': Array<object>;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'metrit'?: number;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'kesto'?: number;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'kesto-1'?: number;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'kesto-2'?: number;
    /**
     * 
     * @type {object}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'aggregaatiot'?: object;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecHakutulokset
     */
    'tunniste'?: number;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecHakuvirhe
 */
export interface HakupalveluSpecHakuspecHakuvirhe {
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecHakuvirhe
     */
    'viesti': string;
    /**
     * 
     * @type {object}
     * @memberof HakupalveluSpecHakuspecHakuvirhe
     */
    'lisatiedot': object;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecLukumaara
 */
export interface HakupalveluSpecHakuspecLukumaara {
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecLukumaara
     */
    'osumia'?: number;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecLukumaara
     */
    'metrit'?: number;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecLukumaara
     */
    'raja-arvo'?: number;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecLukumaara
     */
    'kesto'?: number;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecTallennaHaku
 */
export interface HakupalveluSpecHakuspecTallennaHaku {
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecTallennaHaku
     */
    'nimi': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof HakupalveluSpecHakuspecTallennaHaku
     */
    'suosikki?': boolean;
    /**
     * 
     * @type {HakupalveluSpecHakuspecTallennaHakuHaku}
     * @memberof HakupalveluSpecHakuspecTallennaHaku
     */
    'haku': HakupalveluSpecHakuspecTallennaHakuHaku;
    /**
     * 
     * @type {HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke}
     * @memberof HakupalveluSpecHakuspecTallennaHaku
     */
    'muodostettu-hakulauseke': HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecTallennaHakuHaku
 */
export interface HakupalveluSpecHakuspecTallennaHakuHaku {
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecTallennaHakuHaku
     */
    'valittu-osio': string;
    /**
     * 
     * @type {object}
     * @memberof HakupalveluSpecHakuspecTallennaHakuHaku
     */
    'haun-kohdistus': object;
    /**
     * 
     * @type {object}
     * @memberof HakupalveluSpecHakuspecTallennaHakuHaku
     */
    'haun-rakennus': object | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof HakupalveluSpecHakuspecTallennaHakuHaku
     */
    'kohdeluokat': Array<string>;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke
 */
export interface HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke {
    /**
     * 
     * @type {Array<string>}
     * @memberof HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke
     */
    'kohdeluokat': Array<string>;
    /**
     * 
     * @type {HakulausekeAsetukset}
     * @memberof HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke
     */
    'asetukset': HakulausekeAsetukset;
    /**
     * 
     * @type {object}
     * @memberof HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke
     */
    'lauseke'?: object;
    /**
     * 
     * @type {HakulausekeLisarajaukset}
     * @memberof HakupalveluSpecHakuspecTallennaHakuMuodostettuHakulauseke
     */
    'lisarajaukset'?: HakulausekeLisarajaukset;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecTallennetutHaut
 */
export interface HakupalveluSpecHakuspecTallennetutHaut {
    /**
     * 
     * @type {Array<object>}
     * @memberof HakupalveluSpecHakuspecTallennetutHaut
     */
    'suosikit': Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof HakupalveluSpecHakuspecTallennetutHaut
     */
    'viimeaikaiset': Array<object>;
}
/**
 * 
 * @export
 * @interface HakupalveluSpecHakuspecTaustahakuTila
 */
export interface HakupalveluSpecHakuspecTaustahakuTila {
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'hakutunniste': string;
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'tila': string;
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'alkuaika': string;
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'muokkausaika': string;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'hakutunniste-voimassa': number;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'metrit'?: number;
    /**
     * 
     * @type {string}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'tagi'?: string;
    /**
     * 
     * @type {number}
     * @memberof HakupalveluSpecHakuspecTaustahakuTila
     */
    'osumia'?: number;
}

/**
 * HakuApi - axios parameter creator
 * @export
 */
export const HakuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hakee kaikki aineistot, jotka ovat linkattu parametrinä annettuun OID:n.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuAineistotLinkitOidGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuAineistotLinkitOidGet', 'oid', oid)
            const localVarPath = `/hakupalvelu/api/v1/haku/aineistot/linkit/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä aineistoja
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuAineistotPost: async (hakulausekeKysely: HakulausekeKysely, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuAineistotPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/haku/aineistot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuKohdeluokatCsvPost: async (hakulausekeKysely: HakulausekeKysely, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuKohdeluokatCsvPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/haku/kohdeluokat/csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttävien kohdeluokkien lukumäärä
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuKohdeluokatLukumaaraPost: async (hakulausekeKysely: HakulausekeKysely, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuKohdeluokatLukumaaraPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/haku/kohdeluokat/lukumaara`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuKohdeluokatPost: async (hakulausekeKysely: HakulausekeKysely, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuKohdeluokatPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/haku/kohdeluokat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae hakupalvelusta
         * @param {HakupalveluSpecHakuspecHaku} hakupalveluSpecHakuspecHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuPost: async (hakupalveluSpecHakuspecHaku: HakupalveluSpecHakuspecHaku, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakupalveluSpecHakuspecHaku' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuPost', 'hakupalveluSpecHakuspecHaku', hakupalveluSpecHakuspecHaku)
            const localVarPath = `/hakupalvelu/api/v1/haku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakupalveluSpecHakuspecHaku, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee kaikki projektit, joiden nimessä esiintyy annetulla merkkijonolla alkava sana.
         * @param {string} nimenAlku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuProjektitNimiNimenAlkuGet: async (nimenAlku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nimenAlku' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuProjektitNimiNimenAlkuGet', 'nimenAlku', nimenAlku)
            const localVarPath = `/hakupalvelu/api/v1/haku/projektit/nimi/{nimen-alku}`
                .replace(`{${"nimen-alku"}}`, encodeURIComponent(String(nimenAlku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttävien tieosuuksien yhteenlaskettu pituus
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuTieosuudetLukumaaraPost: async (hakulausekeKysely: HakulausekeKysely, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuTieosuudetLukumaaraPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/haku/tieosuudet/lukumaara`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosuuksia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuTieosuudetPost: async (hakulausekeKysely: HakulausekeKysely, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuTieosuudetPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/haku/tieosuudet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee kaikki viittaukset, jotka ovat linkattu parametrinä annettuun OID:n.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuViittauksetLinkitOidGet: async (oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuViittauksetLinkitOidGet', 'oid', oid)
            const localVarPath = `/hakupalvelu/api/v1/haku/viittaukset/linkit/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä viittauksia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuViittauksetPost: async (hakulausekeKysely: HakulausekeKysely, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1HakuViittauksetPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/haku/viittaukset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HakuApi - functional programming interface
 * @export
 */
export const HakuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HakuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hakee kaikki aineistot, jotka ovat linkattu parametrinä annettuun OID:n.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuAineistotLinkitOidGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuAineistotLinkitOidGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä aineistoja
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuAineistotPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecHakutulokset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuAineistotPost(hakulausekeKysely, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuKohdeluokatCsvPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuKohdeluokatCsvPost(hakulausekeKysely, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttävien kohdeluokkien lukumäärä
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuKohdeluokatLukumaaraPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuKohdeluokatLukumaaraPost(hakulausekeKysely, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuKohdeluokatPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecHakutulokset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuKohdeluokatPost(hakulausekeKysely, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae hakupalvelusta
         * @param {HakupalveluSpecHakuspecHaku} hakupalveluSpecHakuspecHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuPost(hakupalveluSpecHakuspecHaku: HakupalveluSpecHakuspecHaku, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecHakutulokset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuPost(hakupalveluSpecHakuspecHaku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee kaikki projektit, joiden nimessä esiintyy annetulla merkkijonolla alkava sana.
         * @param {string} nimenAlku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuProjektitNimiNimenAlkuGet(nimenAlku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuProjektitNimiNimenAlkuGet(nimenAlku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttävien tieosuuksien yhteenlaskettu pituus
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuTieosuudetLukumaaraPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecLukumaara>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuTieosuudetLukumaaraPost(hakulausekeKysely, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosuuksia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuTieosuudetPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecHakutulokset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuTieosuudetPost(hakulausekeKysely, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee kaikki viittaukset, jotka ovat linkattu parametrinä annettuun OID:n.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuViittauksetLinkitOidGet(oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuViittauksetLinkitOidGet(oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä viittauksia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1HakuViittauksetPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecHakutulokset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1HakuViittauksetPost(hakulausekeKysely, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HakuApi - factory interface
 * @export
 */
export const HakuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HakuApiFp(configuration)
    return {
        /**
         * 
         * @summary Hakee kaikki aineistot, jotka ovat linkattu parametrinä annettuun OID:n.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuAineistotLinkitOidGet(oid: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.hakupalveluApiV1HakuAineistotLinkitOidGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä aineistoja
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuAineistotPost(hakulausekeKysely: HakulausekeKysely, options?: any): AxiosPromise<HakupalveluSpecHakuspecHakutulokset> {
            return localVarFp.hakupalveluApiV1HakuAineistotPost(hakulausekeKysely, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuKohdeluokatCsvPost(hakulausekeKysely: HakulausekeKysely, options?: any): AxiosPromise<object> {
            return localVarFp.hakupalveluApiV1HakuKohdeluokatCsvPost(hakulausekeKysely, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttävien kohdeluokkien lukumäärä
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuKohdeluokatLukumaaraPost(hakulausekeKysely: HakulausekeKysely, options?: any): AxiosPromise<object> {
            return localVarFp.hakupalveluApiV1HakuKohdeluokatLukumaaraPost(hakulausekeKysely, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuKohdeluokatPost(hakulausekeKysely: HakulausekeKysely, options?: any): AxiosPromise<HakupalveluSpecHakuspecHakutulokset> {
            return localVarFp.hakupalveluApiV1HakuKohdeluokatPost(hakulausekeKysely, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae hakupalvelusta
         * @param {HakupalveluSpecHakuspecHaku} hakupalveluSpecHakuspecHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuPost(hakupalveluSpecHakuspecHaku: HakupalveluSpecHakuspecHaku, options?: any): AxiosPromise<HakupalveluSpecHakuspecHakutulokset> {
            return localVarFp.hakupalveluApiV1HakuPost(hakupalveluSpecHakuspecHaku, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee kaikki projektit, joiden nimessä esiintyy annetulla merkkijonolla alkava sana.
         * @param {string} nimenAlku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuProjektitNimiNimenAlkuGet(nimenAlku: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.hakupalveluApiV1HakuProjektitNimiNimenAlkuGet(nimenAlku, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttävien tieosuuksien yhteenlaskettu pituus
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuTieosuudetLukumaaraPost(hakulausekeKysely: HakulausekeKysely, options?: any): AxiosPromise<HakupalveluSpecHakuspecLukumaara> {
            return localVarFp.hakupalveluApiV1HakuTieosuudetLukumaaraPost(hakulausekeKysely, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosuuksia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuTieosuudetPost(hakulausekeKysely: HakulausekeKysely, options?: any): AxiosPromise<HakupalveluSpecHakuspecHakutulokset> {
            return localVarFp.hakupalveluApiV1HakuTieosuudetPost(hakulausekeKysely, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee kaikki viittaukset, jotka ovat linkattu parametrinä annettuun OID:n.
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuViittauksetLinkitOidGet(oid: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.hakupalveluApiV1HakuViittauksetLinkitOidGet(oid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä viittauksia
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1HakuViittauksetPost(hakulausekeKysely: HakulausekeKysely, options?: any): AxiosPromise<HakupalveluSpecHakuspecHakutulokset> {
            return localVarFp.hakupalveluApiV1HakuViittauksetPost(hakulausekeKysely, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HakuApi - object-oriented interface
 * @export
 * @class HakuApi
 * @extends {BaseAPI}
 */
export class HakuApi extends BaseAPI {
    /**
     * 
     * @summary Hakee kaikki aineistot, jotka ovat linkattu parametrinä annettuun OID:n.
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuAineistotLinkitOidGet(oid: string, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuAineistotLinkitOidGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttäviä aineistoja
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuAineistotPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuAineistotPost(hakulausekeKysely, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttäviä kohdeluokkia
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuKohdeluokatCsvPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuKohdeluokatCsvPost(hakulausekeKysely, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttävien kohdeluokkien lukumäärä
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuKohdeluokatLukumaaraPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuKohdeluokatLukumaaraPost(hakulausekeKysely, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttäviä kohdeluokkia
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuKohdeluokatPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuKohdeluokatPost(hakulausekeKysely, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae hakupalvelusta
     * @param {HakupalveluSpecHakuspecHaku} hakupalveluSpecHakuspecHaku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuPost(hakupalveluSpecHakuspecHaku: HakupalveluSpecHakuspecHaku, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuPost(hakupalveluSpecHakuspecHaku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee kaikki projektit, joiden nimessä esiintyy annetulla merkkijonolla alkava sana.
     * @param {string} nimenAlku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuProjektitNimiNimenAlkuGet(nimenAlku: string, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuProjektitNimiNimenAlkuGet(nimenAlku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttävien tieosuuksien yhteenlaskettu pituus
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuTieosuudetLukumaaraPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuTieosuudetLukumaaraPost(hakulausekeKysely, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttäviä tieosuuksia
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuTieosuudetPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuTieosuudetPost(hakulausekeKysely, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee kaikki viittaukset, jotka ovat linkattu parametrinä annettuun OID:n.
     * @param {string} oid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuViittauksetLinkitOidGet(oid: string, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuViittauksetLinkitOidGet(oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttäviä viittauksia
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HakuApi
     */
    public hakupalveluApiV1HakuViittauksetPost(hakulausekeKysely: HakulausekeKysely, options?: AxiosRequestConfig) {
        return HakuApiFp(this.configuration).hakupalveluApiV1HakuViittauksetPost(hakulausekeKysely, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TallennusApi - axios parameter creator
 * @export
 */
export const TallennusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hakee käyttäjätunnukselle tallennetut suosikki- ja viimeaikaiset haut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TallennusHaeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hakupalvelu/api/v1/tallennus/hae`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tallenna hakulauseke käyttäjälle
         * @param {HakupalveluSpecHakuspecTallennaHaku} hakupalveluSpecHakuspecTallennaHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TallennusTallennaPost: async (hakupalveluSpecHakuspecTallennaHaku: HakupalveluSpecHakuspecTallennaHaku, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakupalveluSpecHakuspecTallennaHaku' is not null or undefined
            assertParamExists('hakupalveluApiV1TallennusTallennaPost', 'hakupalveluSpecHakuspecTallennaHaku', hakupalveluSpecHakuspecTallennaHaku)
            const localVarPath = `/hakupalvelu/api/v1/tallennus/tallenna`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakupalveluSpecHakuspecTallennaHaku, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TallennusApi - functional programming interface
 * @export
 */
export const TallennusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TallennusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hakee käyttäjätunnukselle tallennetut suosikki- ja viimeaikaiset haut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TallennusHaeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecTallennetutHaut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TallennusHaeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tallenna hakulauseke käyttäjälle
         * @param {HakupalveluSpecHakuspecTallennaHaku} hakupalveluSpecHakuspecTallennaHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TallennusTallennaPost(hakupalveluSpecHakuspecTallennaHaku: HakupalveluSpecHakuspecTallennaHaku, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TallennusTallennaPost(hakupalveluSpecHakuspecTallennaHaku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TallennusApi - factory interface
 * @export
 */
export const TallennusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TallennusApiFp(configuration)
    return {
        /**
         * 
         * @summary Hakee käyttäjätunnukselle tallennetut suosikki- ja viimeaikaiset haut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TallennusHaeGet(options?: any): AxiosPromise<HakupalveluSpecHakuspecTallennetutHaut> {
            return localVarFp.hakupalveluApiV1TallennusHaeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tallenna hakulauseke käyttäjälle
         * @param {HakupalveluSpecHakuspecTallennaHaku} hakupalveluSpecHakuspecTallennaHaku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TallennusTallennaPost(hakupalveluSpecHakuspecTallennaHaku: HakupalveluSpecHakuspecTallennaHaku, options?: any): AxiosPromise<object> {
            return localVarFp.hakupalveluApiV1TallennusTallennaPost(hakupalveluSpecHakuspecTallennaHaku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TallennusApi - object-oriented interface
 * @export
 * @class TallennusApi
 * @extends {BaseAPI}
 */
export class TallennusApi extends BaseAPI {
    /**
     * 
     * @summary Hakee käyttäjätunnukselle tallennetut suosikki- ja viimeaikaiset haut
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TallennusApi
     */
    public hakupalveluApiV1TallennusHaeGet(options?: AxiosRequestConfig) {
        return TallennusApiFp(this.configuration).hakupalveluApiV1TallennusHaeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tallenna hakulauseke käyttäjälle
     * @param {HakupalveluSpecHakuspecTallennaHaku} hakupalveluSpecHakuspecTallennaHaku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TallennusApi
     */
    public hakupalveluApiV1TallennusTallennaPost(hakupalveluSpecHakuspecTallennaHaku: HakupalveluSpecHakuspecTallennaHaku, options?: AxiosRequestConfig) {
        return TallennusApiFp(this.configuration).hakupalveluApiV1TallennusTallennaPost(hakupalveluSpecHakuspecTallennaHaku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaustahakuApi - axios parameter creator
 * @export
 */
export const TaustahakuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia taustahakuna
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuKohdeluokatPost: async (hakulausekeKysely: HakulausekeKysely, tagi?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuKohdeluokatPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/kohdeluokat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagi !== undefined) {
                localVarQueryParameter['tagi'] = tagi;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosia taustahakuna
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTieosuudetPost: async (hakulausekeKysely: HakulausekeKysely, tagi?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuTieosuudetPost', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tieosuudet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagi !== undefined) {
                localVarQueryParameter['tagi'] = tagi;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosia taustahakuna. Ulottumat pilkotaan palautettavat-kentat - mukaisesti.
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTieosuudetV2Post: async (hakulausekeKysely: HakulausekeKysely, tagi?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakulausekeKysely' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuTieosuudetV2Post', 'hakulausekeKysely', hakulausekeKysely)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tieosuudet-v2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagi !== undefined) {
                localVarQueryParameter['tagi'] = tagi;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hakulausekeKysely, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee tehtyjen taustahakujen tilat.
         * @param {string} [tagit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTilaGet: async (tagit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tila`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagit !== undefined) {
                localVarQueryParameter['tagit'] = tagit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee taustahaun tilan annetulle hakutunnistelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTilaHakutunnisteGet: async (hakutunniste: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakutunniste' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuTilaHakutunnisteGet', 'hakutunniste', hakutunniste)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tila/{hakutunniste}`
                .replace(`{${"hakutunniste"}}`, encodeURIComponent(String(hakutunniste)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset csv:nä annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet: async (hakutunniste: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakutunniste' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet', 'hakutunniste', hakutunniste)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tulokset/{hakutunniste}/csv`
                .replace(`{${"hakutunniste"}}`, encodeURIComponent(String(hakutunniste)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset geojson:na annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet: async (hakutunniste: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakutunniste' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet', 'hakutunniste', hakutunniste)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tulokset/{hakutunniste}/geojson`
                .replace(`{${"hakutunniste"}}`, encodeURIComponent(String(hakutunniste)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset annetulle hakutunnistelle.
         * @param {string} hakutunniste 
         * @param {number} [alkupiste] 
         * @param {number} [maara] 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet: async (hakutunniste: string, alkupiste?: number, maara?: number, eiGeometrioita?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakutunniste' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet', 'hakutunniste', hakutunniste)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tulokset/{hakutunniste}`
                .replace(`{${"hakutunniste"}}`, encodeURIComponent(String(hakutunniste)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (alkupiste !== undefined) {
                localVarQueryParameter['alkupiste'] = alkupiste;
            }

            if (maara !== undefined) {
                localVarQueryParameter['maara'] = maara;
            }

            if (eiGeometrioita !== undefined) {
                localVarQueryParameter['ei-geometrioita?'] = eiGeometrioita;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset xlsx:nä annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet: async (hakutunniste: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hakutunniste' is not null or undefined
            assertParamExists('hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet', 'hakutunniste', hakutunniste)
            const localVarPath = `/hakupalvelu/api/v1/taustahaku/tulokset/{hakutunniste}/xlsx`
                .replace(`{${"hakutunniste"}}`, encodeURIComponent(String(hakutunniste)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaustahakuApi - functional programming interface
 * @export
 */
export const TaustahakuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaustahakuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia taustahakuna
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuKohdeluokatPost(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuKohdeluokatPost(hakulausekeKysely, tagi, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosia taustahakuna
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTieosuudetPost(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTieosuudetPost(hakulausekeKysely, tagi, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosia taustahakuna. Ulottumat pilkotaan palautettavat-kentat - mukaisesti.
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTieosuudetV2Post(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTieosuudetV2Post(hakulausekeKysely, tagi, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee tehtyjen taustahakujen tilat.
         * @param {string} [tagit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTilaGet(tagit?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTilaGet(tagit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee taustahaun tilan annetulle hakutunnistelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTilaHakutunnisteGet(hakutunniste: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTilaHakutunnisteGet(hakutunniste, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset csv:nä annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet(hakutunniste: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet(hakutunniste, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset geojson:na annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet(hakutunniste: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet(hakutunniste, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset annetulle hakutunnistelle.
         * @param {string} hakutunniste 
         * @param {number} [alkupiste] 
         * @param {number} [maara] 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet(hakutunniste: string, alkupiste?: number, maara?: number, eiGeometrioita?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet(hakutunniste, alkupiste, maara, eiGeometrioita, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset xlsx:nä annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet(hakutunniste: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet(hakutunniste, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaustahakuApi - factory interface
 * @export
 */
export const TaustahakuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaustahakuApiFp(configuration)
    return {
        /**
         * 
         * @summary Hae ehdot täyttäviä kohdeluokkia taustahakuna
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuKohdeluokatPost(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: any): AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila> {
            return localVarFp.hakupalveluApiV1TaustahakuKohdeluokatPost(hakulausekeKysely, tagi, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosia taustahakuna
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTieosuudetPost(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: any): AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila> {
            return localVarFp.hakupalveluApiV1TaustahakuTieosuudetPost(hakulausekeKysely, tagi, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hae ehdot täyttäviä tieosia taustahakuna. Ulottumat pilkotaan palautettavat-kentat - mukaisesti.
         * @param {HakulausekeKysely} hakulausekeKysely 
         * @param {any} [tagi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTieosuudetV2Post(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: any): AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila> {
            return localVarFp.hakupalveluApiV1TaustahakuTieosuudetV2Post(hakulausekeKysely, tagi, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee tehtyjen taustahakujen tilat.
         * @param {string} [tagit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTilaGet(tagit?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.hakupalveluApiV1TaustahakuTilaGet(tagit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee taustahaun tilan annetulle hakutunnistelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTilaHakutunnisteGet(hakutunniste: string, options?: any): AxiosPromise<HakupalveluSpecHakuspecTaustahakuTila> {
            return localVarFp.hakupalveluApiV1TaustahakuTilaHakutunnisteGet(hakutunniste, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset csv:nä annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet(hakutunniste: string, options?: any): AxiosPromise<object> {
            return localVarFp.hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet(hakutunniste, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset geojson:na annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet(hakutunniste: string, options?: any): AxiosPromise<object> {
            return localVarFp.hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet(hakutunniste, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset annetulle hakutunnistelle.
         * @param {string} hakutunniste 
         * @param {number} [alkupiste] 
         * @param {number} [maara] 
         * @param {boolean} [eiGeometrioita] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet(hakutunniste: string, alkupiste?: number, maara?: number, eiGeometrioita?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet(hakutunniste, alkupiste, maara, eiGeometrioita, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hakee taustahaun tulokset xlsx:nä annetulle hakutunnisteelle.
         * @param {string} hakutunniste 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet(hakutunniste: string, options?: any): AxiosPromise<object> {
            return localVarFp.hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet(hakutunniste, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaustahakuApi - object-oriented interface
 * @export
 * @class TaustahakuApi
 * @extends {BaseAPI}
 */
export class TaustahakuApi extends BaseAPI {
    /**
     * 
     * @summary Hae ehdot täyttäviä kohdeluokkia taustahakuna
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {any} [tagi] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuKohdeluokatPost(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuKohdeluokatPost(hakulausekeKysely, tagi, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttäviä tieosia taustahakuna
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {any} [tagi] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTieosuudetPost(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTieosuudetPost(hakulausekeKysely, tagi, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hae ehdot täyttäviä tieosia taustahakuna. Ulottumat pilkotaan palautettavat-kentat - mukaisesti.
     * @param {HakulausekeKysely} hakulausekeKysely 
     * @param {any} [tagi] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTieosuudetV2Post(hakulausekeKysely: HakulausekeKysely, tagi?: any, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTieosuudetV2Post(hakulausekeKysely, tagi, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee tehtyjen taustahakujen tilat.
     * @param {string} [tagit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTilaGet(tagit?: string, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTilaGet(tagit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee taustahaun tilan annetulle hakutunnistelle.
     * @param {string} hakutunniste 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTilaHakutunnisteGet(hakutunniste: string, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTilaHakutunnisteGet(hakutunniste, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee taustahaun tulokset csv:nä annetulle hakutunnisteelle.
     * @param {string} hakutunniste 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet(hakutunniste: string, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTuloksetHakutunnisteCsvGet(hakutunniste, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee taustahaun tulokset geojson:na annetulle hakutunnisteelle.
     * @param {string} hakutunniste 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet(hakutunniste: string, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTuloksetHakutunnisteGeojsonGet(hakutunniste, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee taustahaun tulokset annetulle hakutunnistelle.
     * @param {string} hakutunniste 
     * @param {number} [alkupiste] 
     * @param {number} [maara] 
     * @param {boolean} [eiGeometrioita] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet(hakutunniste: string, alkupiste?: number, maara?: number, eiGeometrioita?: boolean, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTuloksetHakutunnisteGet(hakutunniste, alkupiste, maara, eiGeometrioita, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hakee taustahaun tulokset xlsx:nä annetulle hakutunnisteelle.
     * @param {string} hakutunniste 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaustahakuApi
     */
    public hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet(hakutunniste: string, options?: AxiosRequestConfig) {
        return TaustahakuApiFp(this.configuration).hakupalveluApiV1TaustahakuTuloksetHakutunnisteXlsxGet(hakutunniste, options).then((request) => request(this.axios, this.basePath));
    }
}


